'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("DB_DataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DB_DataSet
    Inherits System.Data.DataSet
    
    Private tableAll As AllDataTable
    
    Private tablegeo01 As geo01DataTable
    
    Private tablegeo02 As geo02DataTable
    
    Private tablegeo03 As geo03DataTable
    
    Private tablegeo04 As geo04DataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("All")) Is Nothing) Then
                MyBase.Tables.Add(New AllDataTable(ds.Tables("All")))
            End If
            If (Not (ds.Tables("geo01")) Is Nothing) Then
                MyBase.Tables.Add(New geo01DataTable(ds.Tables("geo01")))
            End If
            If (Not (ds.Tables("geo02")) Is Nothing) Then
                MyBase.Tables.Add(New geo02DataTable(ds.Tables("geo02")))
            End If
            If (Not (ds.Tables("geo03")) Is Nothing) Then
                MyBase.Tables.Add(New geo03DataTable(ds.Tables("geo03")))
            End If
            If (Not (ds.Tables("geo04")) Is Nothing) Then
                MyBase.Tables.Add(New geo04DataTable(ds.Tables("geo04")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property All() As AllDataTable
        Get
            Return Me.tableAll
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property geo01() As geo01DataTable
        Get
            Return Me.tablegeo01
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property geo02() As geo02DataTable
        Get
            Return Me.tablegeo02
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property geo03() As geo03DataTable
        Get
            Return Me.tablegeo03
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property geo04() As geo04DataTable
        Get
            Return Me.tablegeo04
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As DB_DataSet = CType(MyBase.Clone,DB_DataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("All")) Is Nothing) Then
                MyBase.Tables.Add(New AllDataTable(ds.Tables("All")))
            End If
            If (Not (ds.Tables("geo01")) Is Nothing) Then
                MyBase.Tables.Add(New geo01DataTable(ds.Tables("geo01")))
            End If
            If (Not (ds.Tables("geo02")) Is Nothing) Then
                MyBase.Tables.Add(New geo02DataTable(ds.Tables("geo02")))
            End If
            If (Not (ds.Tables("geo03")) Is Nothing) Then
                MyBase.Tables.Add(New geo03DataTable(ds.Tables("geo03")))
            End If
            If (Not (ds.Tables("geo04")) Is Nothing) Then
                MyBase.Tables.Add(New geo04DataTable(ds.Tables("geo04")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAll = CType(MyBase.Tables("All"),AllDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAll) Is Nothing) Then
                Me.tableAll.InitVars
            End If
        End If
        Me.tablegeo01 = CType(MyBase.Tables("geo01"),geo01DataTable)
        If (initTable = true) Then
            If (Not (Me.tablegeo01) Is Nothing) Then
                Me.tablegeo01.InitVars
            End If
        End If
        Me.tablegeo02 = CType(MyBase.Tables("geo02"),geo02DataTable)
        If (initTable = true) Then
            If (Not (Me.tablegeo02) Is Nothing) Then
                Me.tablegeo02.InitVars
            End If
        End If
        Me.tablegeo03 = CType(MyBase.Tables("geo03"),geo03DataTable)
        If (initTable = true) Then
            If (Not (Me.tablegeo03) Is Nothing) Then
                Me.tablegeo03.InitVars
            End If
        End If
        Me.tablegeo04 = CType(MyBase.Tables("geo04"),geo04DataTable)
        If (initTable = true) Then
            If (Not (Me.tablegeo04) Is Nothing) Then
                Me.tablegeo04.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DB_DataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DB_DataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableAll = New AllDataTable
        MyBase.Tables.Add(Me.tableAll)
        Me.tablegeo01 = New geo01DataTable
        MyBase.Tables.Add(Me.tablegeo01)
        Me.tablegeo02 = New geo02DataTable
        MyBase.Tables.Add(Me.tablegeo02)
        Me.tablegeo03 = New geo03DataTable
        MyBase.Tables.Add(Me.tablegeo03)
        Me.tablegeo04 = New geo04DataTable
        MyBase.Tables.Add(Me.tablegeo04)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAll() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializegeo01() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializegeo02() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializegeo03() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializegeo04() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DB_DataSet = New DB_DataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub AllRowChangeEventHandler(ByVal sender As Object, ByVal e As AllRowChangeEvent)
    
    Public Delegate Sub geo01RowChangeEventHandler(ByVal sender As Object, ByVal e As geo01RowChangeEvent)
    
    Public Delegate Sub geo02RowChangeEventHandler(ByVal sender As Object, ByVal e As geo02RowChangeEvent)
    
    Public Delegate Sub geo03RowChangeEventHandler(ByVal sender As Object, ByVal e As geo03RowChangeEvent)
    
    Public Delegate Sub geo04RowChangeEventHandler(ByVal sender As Object, ByVal e As geo04RowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AllDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCount As System.Data.DataColumn
        
        Private columnGeometric_configuration As System.Data.DataColumn
        
        Private columnBC As System.Data.DataColumn
        
        Private _columna__m_ As System.Data.DataColumn
        
        Private _columnb__m_ As System.Data.DataColumn
        
        Private _columna_b As System.Data.DataColumn
        
        Private _columnt__mm_ As System.Data.DataColumn
        
        Private columnNa As System.Data.DataColumn
        
        Private columnNb As System.Data.DataColumn
        
        Private _columnP__Pa_ As System.Data.DataColumn
        
        Private _columnE__GPa_ As System.Data.DataColumn
        
        Private columnni As System.Data.DataColumn
        
        Private _columnProgram_result__mm_ As System.Data.DataColumn
        
        Private _columnFEA_result__mm_ As System.Data.DataColumn
        
        Private columnRelative_Error As System.Data.DataColumn
        
        Private columnFEA_result_at_center As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "All"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountColumn() As System.Data.DataColumn
            Get
                Return Me.columnCount
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Geometric_configurationColumn() As System.Data.DataColumn
            Get
                Return Me.columnGeometric_configuration
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BCColumn() As System.Data.DataColumn
            Get
                Return Me.columnBC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _a__m_Column() As System.Data.DataColumn
            Get
                Return Me._columna__m_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _b__m_Column() As System.Data.DataColumn
            Get
                Return Me._columnb__m_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _a_bColumn() As System.Data.DataColumn
            Get
                Return Me._columna_b
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _t__mm_Column() As System.Data.DataColumn
            Get
                Return Me._columnt__mm_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NaColumn() As System.Data.DataColumn
            Get
                Return Me.columnNa
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NbColumn() As System.Data.DataColumn
            Get
                Return Me.columnNb
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _P__Pa_Column() As System.Data.DataColumn
            Get
                Return Me._columnP__Pa_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _E__GPa_Column() As System.Data.DataColumn
            Get
                Return Me._columnE__GPa_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property niColumn() As System.Data.DataColumn
            Get
                Return Me.columnni
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Program_result__mm_Column() As System.Data.DataColumn
            Get
                Return Me._columnProgram_result__mm_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _FEA_result__mm_Column() As System.Data.DataColumn
            Get
                Return Me._columnFEA_result__mm_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Relative_ErrorColumn() As System.Data.DataColumn
            Get
                Return Me.columnRelative_Error
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEA_result_at_centerColumn() As System.Data.DataColumn
            Get
                Return Me.columnFEA_result_at_center
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AllRow
            Get
                Return CType(Me.Rows(index),AllRow)
            End Get
        End Property
        
        Public Event AllRowChanging As AllRowChangeEventHandler
        
        Public Event AllRowChanged As AllRowChangeEventHandler
        
        Public Event AllRowDeleting As AllRowChangeEventHandler
        
        Public Event AllRowDeleted As AllRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAllRow(ByVal row As AllRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAllRow( _
                    ByVal Count As Double,  _
                    ByVal Geometric_configuration As String,  _
                    ByVal BC As Double,  _
                    ByVal _a__m_ As Double,  _
                    ByVal _b__m_ As Double,  _
                    ByVal _a_b As Double,  _
                    ByVal _t__mm_ As Double,  _
                    ByVal Na As Double,  _
                    ByVal Nb As Double,  _
                    ByVal _P__Pa_ As Double,  _
                    ByVal _E__GPa_ As Double,  _
                    ByVal ni As Double,  _
                    ByVal _Program_result__mm_ As Double,  _
                    ByVal _FEA_result__mm_ As Double,  _
                    ByVal Relative_Error As Double,  _
                    ByVal FEA_result_at_center As String) As AllRow
            Dim rowAllRow As AllRow = CType(Me.NewRow,AllRow)
            rowAllRow.ItemArray = New Object() {Count, Geometric_configuration, BC, _a__m_, _b__m_, _a_b, _t__mm_, Na, Nb, _P__Pa_, _E__GPa_, ni, _Program_result__mm_, _FEA_result__mm_, Relative_Error, FEA_result_at_center}
            Me.Rows.Add(rowAllRow)
            Return rowAllRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As AllDataTable = CType(MyBase.Clone,AllDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New AllDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCount = MyBase.Columns("Count")
            Me.columnGeometric_configuration = MyBase.Columns("Geometric configuration")
            Me.columnBC = MyBase.Columns("BC")
            Me._columna__m_ = MyBase.Columns("a (m)")
            Me._columnb__m_ = MyBase.Columns("b (m)")
            Me._columna_b = MyBase.Columns("a/b")
            Me._columnt__mm_ = MyBase.Columns("t (mm)")
            Me.columnNa = MyBase.Columns("Na")
            Me.columnNb = MyBase.Columns("Nb")
            Me._columnP__Pa_ = MyBase.Columns("P (Pa)")
            Me._columnE__GPa_ = MyBase.Columns("E (GPa)")
            Me.columnni = MyBase.Columns("ni")
            Me._columnProgram_result__mm_ = MyBase.Columns("Program result (mm)")
            Me._columnFEA_result__mm_ = MyBase.Columns("FEA result (mm)")
            Me.columnRelative_Error = MyBase.Columns("Relative Error")
            Me.columnFEA_result_at_center = MyBase.Columns("FEA result at center")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCount = New System.Data.DataColumn("Count", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCount)
            Me.columnGeometric_configuration = New System.Data.DataColumn("Geometric configuration", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Geometric_configuration")
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Geometric_configurationColumn")
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnGeometric_configuration")
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_UserColumnName", "Geometric configuration")
            MyBase.Columns.Add(Me.columnGeometric_configuration)
            Me.columnBC = New System.Data.DataColumn("BC", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBC)
            Me._columna__m_ = New System.Data.DataColumn("a (m)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_a__m_")
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_a__m_Column")
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columna__m_")
            Me._columna__m_.ExtendedProperties.Add("Generator_UserColumnName", "a (m)")
            MyBase.Columns.Add(Me._columna__m_)
            Me._columnb__m_ = New System.Data.DataColumn("b (m)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_b__m_")
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_b__m_Column")
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnb__m_")
            Me._columnb__m_.ExtendedProperties.Add("Generator_UserColumnName", "b (m)")
            MyBase.Columns.Add(Me._columnb__m_)
            Me._columna_b = New System.Data.DataColumn("a/b", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columna_b.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_a_b")
            Me._columna_b.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_a_bColumn")
            Me._columna_b.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columna_b")
            Me._columna_b.ExtendedProperties.Add("Generator_UserColumnName", "a/b")
            MyBase.Columns.Add(Me._columna_b)
            Me._columnt__mm_ = New System.Data.DataColumn("t (mm)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnt__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_t__mm_")
            Me._columnt__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_t__mm_Column")
            Me._columnt__mm_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnt__mm_")
            Me._columnt__mm_.ExtendedProperties.Add("Generator_UserColumnName", "t (mm)")
            MyBase.Columns.Add(Me._columnt__mm_)
            Me.columnNa = New System.Data.DataColumn("Na", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNa)
            Me.columnNb = New System.Data.DataColumn("Nb", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNb)
            Me._columnP__Pa_ = New System.Data.DataColumn("P (Pa)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_P__Pa_")
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_P__Pa_Column")
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnP__Pa_")
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_UserColumnName", "P (Pa)")
            MyBase.Columns.Add(Me._columnP__Pa_)
            Me._columnE__GPa_ = New System.Data.DataColumn("E (GPa)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_E__GPa_")
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_E__GPa_Column")
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnE__GPa_")
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_UserColumnName", "E (GPa)")
            MyBase.Columns.Add(Me._columnE__GPa_)
            Me.columnni = New System.Data.DataColumn("ni", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnni)
            Me._columnProgram_result__mm_ = New System.Data.DataColumn("Program result (mm)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Program_result__mm_")
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_Program_result__mm_Column")
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnProgram_result__mm_")
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_UserColumnName", "Program result (mm)")
            MyBase.Columns.Add(Me._columnProgram_result__mm_)
            Me._columnFEA_result__mm_ = New System.Data.DataColumn("FEA result (mm)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_FEA_result__mm_")
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_FEA_result__mm_Column")
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFEA_result__mm_")
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_UserColumnName", "FEA result (mm)")
            MyBase.Columns.Add(Me._columnFEA_result__mm_)
            Me.columnRelative_Error = New System.Data.DataColumn("Relative Error", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Relative_Error")
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Relative_ErrorColumn")
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRelative_Error")
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_UserColumnName", "Relative Error")
            MyBase.Columns.Add(Me.columnRelative_Error)
            Me.columnFEA_result_at_center = New System.Data.DataColumn("FEA result at center", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "FEA_result_at_center")
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "FEA_result_at_centerColumn")
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnFEA_result_at_center")
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_UserColumnName", "FEA result at center")
            MyBase.Columns.Add(Me.columnFEA_result_at_center)
            Me.columnGeometric_configuration.MaxLength = 255
            Me.columnFEA_result_at_center.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAllRow() As AllRow
            Return CType(Me.NewRow,AllRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New AllRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AllRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AllRowChangedEvent) Is Nothing) Then
                RaiseEvent AllRowChanged(Me, New AllRowChangeEvent(CType(e.Row,AllRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AllRowChangingEvent) Is Nothing) Then
                RaiseEvent AllRowChanging(Me, New AllRowChangeEvent(CType(e.Row,AllRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AllRowDeletedEvent) Is Nothing) Then
                RaiseEvent AllRowDeleted(Me, New AllRowChangeEvent(CType(e.Row,AllRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AllRowDeletingEvent) Is Nothing) Then
                RaiseEvent AllRowDeleting(Me, New AllRowChangeEvent(CType(e.Row,AllRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAllRow(ByVal row As AllRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DB_DataSet = New DB_DataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AllDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class geo01DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCount As System.Data.DataColumn
        
        Private columnGeometric_configuration As System.Data.DataColumn
        
        Private columnBC As System.Data.DataColumn
        
        Private _columna__m_ As System.Data.DataColumn
        
        Private _columnb__m_ As System.Data.DataColumn
        
        Private _columna_b As System.Data.DataColumn
        
        Private _columnt__mm_ As System.Data.DataColumn
        
        Private columnNa As System.Data.DataColumn
        
        Private columnNb As System.Data.DataColumn
        
        Private _columnP__Pa_ As System.Data.DataColumn
        
        Private _columnE__GPa_ As System.Data.DataColumn
        
        Private columnni As System.Data.DataColumn
        
        Private _columnProgram_result__mm_ As System.Data.DataColumn
        
        Private _columnFEA_result__mm_ As System.Data.DataColumn
        
        Private columnRelative_Error As System.Data.DataColumn
        
        Private columnFEA_result_at_center As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "geo01"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountColumn() As System.Data.DataColumn
            Get
                Return Me.columnCount
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Geometric_configurationColumn() As System.Data.DataColumn
            Get
                Return Me.columnGeometric_configuration
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BCColumn() As System.Data.DataColumn
            Get
                Return Me.columnBC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _a__m_Column() As System.Data.DataColumn
            Get
                Return Me._columna__m_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _b__m_Column() As System.Data.DataColumn
            Get
                Return Me._columnb__m_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _a_bColumn() As System.Data.DataColumn
            Get
                Return Me._columna_b
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _t__mm_Column() As System.Data.DataColumn
            Get
                Return Me._columnt__mm_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NaColumn() As System.Data.DataColumn
            Get
                Return Me.columnNa
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NbColumn() As System.Data.DataColumn
            Get
                Return Me.columnNb
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _P__Pa_Column() As System.Data.DataColumn
            Get
                Return Me._columnP__Pa_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _E__GPa_Column() As System.Data.DataColumn
            Get
                Return Me._columnE__GPa_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property niColumn() As System.Data.DataColumn
            Get
                Return Me.columnni
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Program_result__mm_Column() As System.Data.DataColumn
            Get
                Return Me._columnProgram_result__mm_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _FEA_result__mm_Column() As System.Data.DataColumn
            Get
                Return Me._columnFEA_result__mm_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Relative_ErrorColumn() As System.Data.DataColumn
            Get
                Return Me.columnRelative_Error
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEA_result_at_centerColumn() As System.Data.DataColumn
            Get
                Return Me.columnFEA_result_at_center
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As geo01Row
            Get
                Return CType(Me.Rows(index),geo01Row)
            End Get
        End Property
        
        Public Event geo01RowChanging As geo01RowChangeEventHandler
        
        Public Event geo01RowChanged As geo01RowChangeEventHandler
        
        Public Event geo01RowDeleting As geo01RowChangeEventHandler
        
        Public Event geo01RowDeleted As geo01RowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addgeo01Row(ByVal row As geo01Row)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addgeo01Row( _
                    ByVal Count As Double,  _
                    ByVal Geometric_configuration As String,  _
                    ByVal BC As Double,  _
                    ByVal _a__m_ As Double,  _
                    ByVal _b__m_ As Double,  _
                    ByVal _a_b As Double,  _
                    ByVal _t__mm_ As Double,  _
                    ByVal Na As Double,  _
                    ByVal Nb As Double,  _
                    ByVal _P__Pa_ As Double,  _
                    ByVal _E__GPa_ As Double,  _
                    ByVal ni As Double,  _
                    ByVal _Program_result__mm_ As Double,  _
                    ByVal _FEA_result__mm_ As Double,  _
                    ByVal Relative_Error As Double,  _
                    ByVal FEA_result_at_center As String) As geo01Row
            Dim rowgeo01Row As geo01Row = CType(Me.NewRow,geo01Row)
            rowgeo01Row.ItemArray = New Object() {Count, Geometric_configuration, BC, _a__m_, _b__m_, _a_b, _t__mm_, Na, Nb, _P__Pa_, _E__GPa_, ni, _Program_result__mm_, _FEA_result__mm_, Relative_Error, FEA_result_at_center}
            Me.Rows.Add(rowgeo01Row)
            Return rowgeo01Row
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCount(ByVal Count As Double) As geo01Row
            Return CType(Me.Rows.Find(New Object() {Count}),geo01Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As geo01DataTable = CType(MyBase.Clone,geo01DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New geo01DataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCount = MyBase.Columns("Count")
            Me.columnGeometric_configuration = MyBase.Columns("Geometric configuration")
            Me.columnBC = MyBase.Columns("BC")
            Me._columna__m_ = MyBase.Columns("a (m)")
            Me._columnb__m_ = MyBase.Columns("b (m)")
            Me._columna_b = MyBase.Columns("a/b")
            Me._columnt__mm_ = MyBase.Columns("t (mm)")
            Me.columnNa = MyBase.Columns("Na")
            Me.columnNb = MyBase.Columns("Nb")
            Me._columnP__Pa_ = MyBase.Columns("P (Pa)")
            Me._columnE__GPa_ = MyBase.Columns("E (GPa)")
            Me.columnni = MyBase.Columns("ni")
            Me._columnProgram_result__mm_ = MyBase.Columns("Program result (mm)")
            Me._columnFEA_result__mm_ = MyBase.Columns("FEA result (mm)")
            Me.columnRelative_Error = MyBase.Columns("Relative Error")
            Me.columnFEA_result_at_center = MyBase.Columns("FEA result at center")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCount = New System.Data.DataColumn("Count", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCount)
            Me.columnGeometric_configuration = New System.Data.DataColumn("Geometric configuration", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Geometric_configuration")
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Geometric_configurationColumn")
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnGeometric_configuration")
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_UserColumnName", "Geometric configuration")
            MyBase.Columns.Add(Me.columnGeometric_configuration)
            Me.columnBC = New System.Data.DataColumn("BC", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBC)
            Me._columna__m_ = New System.Data.DataColumn("a (m)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_a__m_")
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_a__m_Column")
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columna__m_")
            Me._columna__m_.ExtendedProperties.Add("Generator_UserColumnName", "a (m)")
            MyBase.Columns.Add(Me._columna__m_)
            Me._columnb__m_ = New System.Data.DataColumn("b (m)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_b__m_")
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_b__m_Column")
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnb__m_")
            Me._columnb__m_.ExtendedProperties.Add("Generator_UserColumnName", "b (m)")
            MyBase.Columns.Add(Me._columnb__m_)
            Me._columna_b = New System.Data.DataColumn("a/b", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columna_b.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_a_b")
            Me._columna_b.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_a_bColumn")
            Me._columna_b.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columna_b")
            Me._columna_b.ExtendedProperties.Add("Generator_UserColumnName", "a/b")
            MyBase.Columns.Add(Me._columna_b)
            Me._columnt__mm_ = New System.Data.DataColumn("t (mm)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnt__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_t__mm_")
            Me._columnt__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_t__mm_Column")
            Me._columnt__mm_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnt__mm_")
            Me._columnt__mm_.ExtendedProperties.Add("Generator_UserColumnName", "t (mm)")
            MyBase.Columns.Add(Me._columnt__mm_)
            Me.columnNa = New System.Data.DataColumn("Na", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNa)
            Me.columnNb = New System.Data.DataColumn("Nb", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNb)
            Me._columnP__Pa_ = New System.Data.DataColumn("P (Pa)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_P__Pa_")
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_P__Pa_Column")
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnP__Pa_")
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_UserColumnName", "P (Pa)")
            MyBase.Columns.Add(Me._columnP__Pa_)
            Me._columnE__GPa_ = New System.Data.DataColumn("E (GPa)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_E__GPa_")
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_E__GPa_Column")
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnE__GPa_")
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_UserColumnName", "E (GPa)")
            MyBase.Columns.Add(Me._columnE__GPa_)
            Me.columnni = New System.Data.DataColumn("ni", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnni)
            Me._columnProgram_result__mm_ = New System.Data.DataColumn("Program result (mm)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Program_result__mm_")
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_Program_result__mm_Column")
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnProgram_result__mm_")
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_UserColumnName", "Program result (mm)")
            MyBase.Columns.Add(Me._columnProgram_result__mm_)
            Me._columnFEA_result__mm_ = New System.Data.DataColumn("FEA result (mm)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_FEA_result__mm_")
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_FEA_result__mm_Column")
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFEA_result__mm_")
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_UserColumnName", "FEA result (mm)")
            MyBase.Columns.Add(Me._columnFEA_result__mm_)
            Me.columnRelative_Error = New System.Data.DataColumn("Relative Error", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Relative_Error")
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Relative_ErrorColumn")
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRelative_Error")
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_UserColumnName", "Relative Error")
            MyBase.Columns.Add(Me.columnRelative_Error)
            Me.columnFEA_result_at_center = New System.Data.DataColumn("FEA result at center", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "FEA_result_at_center")
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "FEA_result_at_centerColumn")
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnFEA_result_at_center")
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_UserColumnName", "FEA result at center")
            MyBase.Columns.Add(Me.columnFEA_result_at_center)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCount}, true))
            Me.columnCount.AllowDBNull = false
            Me.columnCount.Unique = true
            Me.columnGeometric_configuration.MaxLength = 255
            Me.columnFEA_result_at_center.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newgeo01Row() As geo01Row
            Return CType(Me.NewRow,geo01Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New geo01Row(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(geo01Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.geo01RowChangedEvent) Is Nothing) Then
                RaiseEvent geo01RowChanged(Me, New geo01RowChangeEvent(CType(e.Row,geo01Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.geo01RowChangingEvent) Is Nothing) Then
                RaiseEvent geo01RowChanging(Me, New geo01RowChangeEvent(CType(e.Row,geo01Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.geo01RowDeletedEvent) Is Nothing) Then
                RaiseEvent geo01RowDeleted(Me, New geo01RowChangeEvent(CType(e.Row,geo01Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.geo01RowDeletingEvent) Is Nothing) Then
                RaiseEvent geo01RowDeleting(Me, New geo01RowChangeEvent(CType(e.Row,geo01Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removegeo01Row(ByVal row As geo01Row)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DB_DataSet = New DB_DataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "geo01DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class geo02DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCount As System.Data.DataColumn
        
        Private columnGeometric_configuration As System.Data.DataColumn
        
        Private columnBC As System.Data.DataColumn
        
        Private _columna__m_ As System.Data.DataColumn
        
        Private _columnb__m_ As System.Data.DataColumn
        
        Private _columna_b As System.Data.DataColumn
        
        Private _columnt__mm_ As System.Data.DataColumn
        
        Private columnNa As System.Data.DataColumn
        
        Private columnNb As System.Data.DataColumn
        
        Private _columnP__Pa_ As System.Data.DataColumn
        
        Private _columnE__GPa_ As System.Data.DataColumn
        
        Private columnni As System.Data.DataColumn
        
        Private _columnProgram_result__mm_ As System.Data.DataColumn
        
        Private _columnFEA_result__mm_ As System.Data.DataColumn
        
        Private columnRelative_Error As System.Data.DataColumn
        
        Private columnFEA_result_at_center As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "geo02"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountColumn() As System.Data.DataColumn
            Get
                Return Me.columnCount
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Geometric_configurationColumn() As System.Data.DataColumn
            Get
                Return Me.columnGeometric_configuration
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BCColumn() As System.Data.DataColumn
            Get
                Return Me.columnBC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _a__m_Column() As System.Data.DataColumn
            Get
                Return Me._columna__m_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _b__m_Column() As System.Data.DataColumn
            Get
                Return Me._columnb__m_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _a_bColumn() As System.Data.DataColumn
            Get
                Return Me._columna_b
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _t__mm_Column() As System.Data.DataColumn
            Get
                Return Me._columnt__mm_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NaColumn() As System.Data.DataColumn
            Get
                Return Me.columnNa
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NbColumn() As System.Data.DataColumn
            Get
                Return Me.columnNb
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _P__Pa_Column() As System.Data.DataColumn
            Get
                Return Me._columnP__Pa_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _E__GPa_Column() As System.Data.DataColumn
            Get
                Return Me._columnE__GPa_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property niColumn() As System.Data.DataColumn
            Get
                Return Me.columnni
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Program_result__mm_Column() As System.Data.DataColumn
            Get
                Return Me._columnProgram_result__mm_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _FEA_result__mm_Column() As System.Data.DataColumn
            Get
                Return Me._columnFEA_result__mm_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Relative_ErrorColumn() As System.Data.DataColumn
            Get
                Return Me.columnRelative_Error
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEA_result_at_centerColumn() As System.Data.DataColumn
            Get
                Return Me.columnFEA_result_at_center
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As geo02Row
            Get
                Return CType(Me.Rows(index),geo02Row)
            End Get
        End Property
        
        Public Event geo02RowChanging As geo02RowChangeEventHandler
        
        Public Event geo02RowChanged As geo02RowChangeEventHandler
        
        Public Event geo02RowDeleting As geo02RowChangeEventHandler
        
        Public Event geo02RowDeleted As geo02RowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addgeo02Row(ByVal row As geo02Row)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addgeo02Row( _
                    ByVal Count As Double,  _
                    ByVal Geometric_configuration As String,  _
                    ByVal BC As Double,  _
                    ByVal _a__m_ As Double,  _
                    ByVal _b__m_ As Double,  _
                    ByVal _a_b As Double,  _
                    ByVal _t__mm_ As Double,  _
                    ByVal Na As Double,  _
                    ByVal Nb As Double,  _
                    ByVal _P__Pa_ As Double,  _
                    ByVal _E__GPa_ As Double,  _
                    ByVal ni As Double,  _
                    ByVal _Program_result__mm_ As Double,  _
                    ByVal _FEA_result__mm_ As Double,  _
                    ByVal Relative_Error As Double,  _
                    ByVal FEA_result_at_center As String) As geo02Row
            Dim rowgeo02Row As geo02Row = CType(Me.NewRow,geo02Row)
            rowgeo02Row.ItemArray = New Object() {Count, Geometric_configuration, BC, _a__m_, _b__m_, _a_b, _t__mm_, Na, Nb, _P__Pa_, _E__GPa_, ni, _Program_result__mm_, _FEA_result__mm_, Relative_Error, FEA_result_at_center}
            Me.Rows.Add(rowgeo02Row)
            Return rowgeo02Row
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCount(ByVal Count As Double) As geo02Row
            Return CType(Me.Rows.Find(New Object() {Count}),geo02Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As geo02DataTable = CType(MyBase.Clone,geo02DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New geo02DataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCount = MyBase.Columns("Count")
            Me.columnGeometric_configuration = MyBase.Columns("Geometric configuration")
            Me.columnBC = MyBase.Columns("BC")
            Me._columna__m_ = MyBase.Columns("a (m)")
            Me._columnb__m_ = MyBase.Columns("b (m)")
            Me._columna_b = MyBase.Columns("a/b")
            Me._columnt__mm_ = MyBase.Columns("t (mm)")
            Me.columnNa = MyBase.Columns("Na")
            Me.columnNb = MyBase.Columns("Nb")
            Me._columnP__Pa_ = MyBase.Columns("P (Pa)")
            Me._columnE__GPa_ = MyBase.Columns("E (GPa)")
            Me.columnni = MyBase.Columns("ni")
            Me._columnProgram_result__mm_ = MyBase.Columns("Program result (mm)")
            Me._columnFEA_result__mm_ = MyBase.Columns("FEA result (mm)")
            Me.columnRelative_Error = MyBase.Columns("Relative Error")
            Me.columnFEA_result_at_center = MyBase.Columns("FEA result at center")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCount = New System.Data.DataColumn("Count", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCount)
            Me.columnGeometric_configuration = New System.Data.DataColumn("Geometric configuration", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Geometric_configuration")
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Geometric_configurationColumn")
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnGeometric_configuration")
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_UserColumnName", "Geometric configuration")
            MyBase.Columns.Add(Me.columnGeometric_configuration)
            Me.columnBC = New System.Data.DataColumn("BC", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBC)
            Me._columna__m_ = New System.Data.DataColumn("a (m)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_a__m_")
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_a__m_Column")
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columna__m_")
            Me._columna__m_.ExtendedProperties.Add("Generator_UserColumnName", "a (m)")
            MyBase.Columns.Add(Me._columna__m_)
            Me._columnb__m_ = New System.Data.DataColumn("b (m)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_b__m_")
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_b__m_Column")
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnb__m_")
            Me._columnb__m_.ExtendedProperties.Add("Generator_UserColumnName", "b (m)")
            MyBase.Columns.Add(Me._columnb__m_)
            Me._columna_b = New System.Data.DataColumn("a/b", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columna_b.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_a_b")
            Me._columna_b.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_a_bColumn")
            Me._columna_b.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columna_b")
            Me._columna_b.ExtendedProperties.Add("Generator_UserColumnName", "a/b")
            MyBase.Columns.Add(Me._columna_b)
            Me._columnt__mm_ = New System.Data.DataColumn("t (mm)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnt__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_t__mm_")
            Me._columnt__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_t__mm_Column")
            Me._columnt__mm_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnt__mm_")
            Me._columnt__mm_.ExtendedProperties.Add("Generator_UserColumnName", "t (mm)")
            MyBase.Columns.Add(Me._columnt__mm_)
            Me.columnNa = New System.Data.DataColumn("Na", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNa)
            Me.columnNb = New System.Data.DataColumn("Nb", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNb)
            Me._columnP__Pa_ = New System.Data.DataColumn("P (Pa)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_P__Pa_")
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_P__Pa_Column")
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnP__Pa_")
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_UserColumnName", "P (Pa)")
            MyBase.Columns.Add(Me._columnP__Pa_)
            Me._columnE__GPa_ = New System.Data.DataColumn("E (GPa)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_E__GPa_")
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_E__GPa_Column")
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnE__GPa_")
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_UserColumnName", "E (GPa)")
            MyBase.Columns.Add(Me._columnE__GPa_)
            Me.columnni = New System.Data.DataColumn("ni", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnni)
            Me._columnProgram_result__mm_ = New System.Data.DataColumn("Program result (mm)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Program_result__mm_")
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_Program_result__mm_Column")
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnProgram_result__mm_")
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_UserColumnName", "Program result (mm)")
            MyBase.Columns.Add(Me._columnProgram_result__mm_)
            Me._columnFEA_result__mm_ = New System.Data.DataColumn("FEA result (mm)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_FEA_result__mm_")
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_FEA_result__mm_Column")
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFEA_result__mm_")
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_UserColumnName", "FEA result (mm)")
            MyBase.Columns.Add(Me._columnFEA_result__mm_)
            Me.columnRelative_Error = New System.Data.DataColumn("Relative Error", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Relative_Error")
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Relative_ErrorColumn")
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRelative_Error")
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_UserColumnName", "Relative Error")
            MyBase.Columns.Add(Me.columnRelative_Error)
            Me.columnFEA_result_at_center = New System.Data.DataColumn("FEA result at center", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "FEA_result_at_center")
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "FEA_result_at_centerColumn")
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnFEA_result_at_center")
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_UserColumnName", "FEA result at center")
            MyBase.Columns.Add(Me.columnFEA_result_at_center)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCount}, true))
            Me.columnCount.AllowDBNull = false
            Me.columnCount.Unique = true
            Me.columnGeometric_configuration.MaxLength = 255
            Me.columnFEA_result_at_center.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newgeo02Row() As geo02Row
            Return CType(Me.NewRow,geo02Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New geo02Row(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(geo02Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.geo02RowChangedEvent) Is Nothing) Then
                RaiseEvent geo02RowChanged(Me, New geo02RowChangeEvent(CType(e.Row,geo02Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.geo02RowChangingEvent) Is Nothing) Then
                RaiseEvent geo02RowChanging(Me, New geo02RowChangeEvent(CType(e.Row,geo02Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.geo02RowDeletedEvent) Is Nothing) Then
                RaiseEvent geo02RowDeleted(Me, New geo02RowChangeEvent(CType(e.Row,geo02Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.geo02RowDeletingEvent) Is Nothing) Then
                RaiseEvent geo02RowDeleting(Me, New geo02RowChangeEvent(CType(e.Row,geo02Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removegeo02Row(ByVal row As geo02Row)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DB_DataSet = New DB_DataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "geo02DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class geo03DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCount As System.Data.DataColumn
        
        Private columnGeometric_configuration As System.Data.DataColumn
        
        Private columnBC As System.Data.DataColumn
        
        Private _columna__m_ As System.Data.DataColumn
        
        Private _columnb__m_ As System.Data.DataColumn
        
        Private _columna_b As System.Data.DataColumn
        
        Private _columnt__mm_ As System.Data.DataColumn
        
        Private columnNa As System.Data.DataColumn
        
        Private columnNb As System.Data.DataColumn
        
        Private _columnP__Pa_ As System.Data.DataColumn
        
        Private _columnE__GPa_ As System.Data.DataColumn
        
        Private columnni As System.Data.DataColumn
        
        Private _columnProgram_result__mm_ As System.Data.DataColumn
        
        Private _columnFEA_result__mm_ As System.Data.DataColumn
        
        Private columnRelative_Error As System.Data.DataColumn
        
        Private columnFEA_result_at_center As System.Data.DataColumn
        
        Private columnשדה19 As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "geo03"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountColumn() As System.Data.DataColumn
            Get
                Return Me.columnCount
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Geometric_configurationColumn() As System.Data.DataColumn
            Get
                Return Me.columnGeometric_configuration
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BCColumn() As System.Data.DataColumn
            Get
                Return Me.columnBC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _a__m_Column() As System.Data.DataColumn
            Get
                Return Me._columna__m_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _b__m_Column() As System.Data.DataColumn
            Get
                Return Me._columnb__m_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _a_bColumn() As System.Data.DataColumn
            Get
                Return Me._columna_b
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _t__mm_Column() As System.Data.DataColumn
            Get
                Return Me._columnt__mm_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NaColumn() As System.Data.DataColumn
            Get
                Return Me.columnNa
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NbColumn() As System.Data.DataColumn
            Get
                Return Me.columnNb
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _P__Pa_Column() As System.Data.DataColumn
            Get
                Return Me._columnP__Pa_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _E__GPa_Column() As System.Data.DataColumn
            Get
                Return Me._columnE__GPa_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property niColumn() As System.Data.DataColumn
            Get
                Return Me.columnni
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Program_result__mm_Column() As System.Data.DataColumn
            Get
                Return Me._columnProgram_result__mm_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _FEA_result__mm_Column() As System.Data.DataColumn
            Get
                Return Me._columnFEA_result__mm_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Relative_ErrorColumn() As System.Data.DataColumn
            Get
                Return Me.columnRelative_Error
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEA_result_at_centerColumn() As System.Data.DataColumn
            Get
                Return Me.columnFEA_result_at_center
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property שדה19Column() As System.Data.DataColumn
            Get
                Return Me.columnשדה19
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As geo03Row
            Get
                Return CType(Me.Rows(index),geo03Row)
            End Get
        End Property
        
        Public Event geo03RowChanging As geo03RowChangeEventHandler
        
        Public Event geo03RowChanged As geo03RowChangeEventHandler
        
        Public Event geo03RowDeleting As geo03RowChangeEventHandler
        
        Public Event geo03RowDeleted As geo03RowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addgeo03Row(ByVal row As geo03Row)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addgeo03Row( _
                    ByVal Count As Double,  _
                    ByVal Geometric_configuration As String,  _
                    ByVal BC As Double,  _
                    ByVal _a__m_ As Double,  _
                    ByVal _b__m_ As Double,  _
                    ByVal _a_b As Double,  _
                    ByVal _t__mm_ As Double,  _
                    ByVal Na As Double,  _
                    ByVal Nb As Double,  _
                    ByVal _P__Pa_ As Double,  _
                    ByVal _E__GPa_ As Double,  _
                    ByVal ni As Double,  _
                    ByVal _Program_result__mm_ As Double,  _
                    ByVal _FEA_result__mm_ As Double,  _
                    ByVal Relative_Error As Double,  _
                    ByVal FEA_result_at_center As String,  _
                    ByVal שדה19 As String) As geo03Row
            Dim rowgeo03Row As geo03Row = CType(Me.NewRow,geo03Row)
            rowgeo03Row.ItemArray = New Object() {Count, Geometric_configuration, BC, _a__m_, _b__m_, _a_b, _t__mm_, Na, Nb, _P__Pa_, _E__GPa_, ni, _Program_result__mm_, _FEA_result__mm_, Relative_Error, FEA_result_at_center, שדה19}
            Me.Rows.Add(rowgeo03Row)
            Return rowgeo03Row
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCount(ByVal Count As Double) As geo03Row
            Return CType(Me.Rows.Find(New Object() {Count}),geo03Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As geo03DataTable = CType(MyBase.Clone,geo03DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New geo03DataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCount = MyBase.Columns("Count")
            Me.columnGeometric_configuration = MyBase.Columns("Geometric configuration")
            Me.columnBC = MyBase.Columns("BC")
            Me._columna__m_ = MyBase.Columns("a (m)")
            Me._columnb__m_ = MyBase.Columns("b (m)")
            Me._columna_b = MyBase.Columns("a/b")
            Me._columnt__mm_ = MyBase.Columns("t (mm)")
            Me.columnNa = MyBase.Columns("Na")
            Me.columnNb = MyBase.Columns("Nb")
            Me._columnP__Pa_ = MyBase.Columns("P (Pa)")
            Me._columnE__GPa_ = MyBase.Columns("E (GPa)")
            Me.columnni = MyBase.Columns("ni")
            Me._columnProgram_result__mm_ = MyBase.Columns("Program result (mm)")
            Me._columnFEA_result__mm_ = MyBase.Columns("FEA result (mm)")
            Me.columnRelative_Error = MyBase.Columns("Relative Error")
            Me.columnFEA_result_at_center = MyBase.Columns("FEA result at center")
            Me.columnשדה19 = MyBase.Columns("שדה19")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCount = New System.Data.DataColumn("Count", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCount)
            Me.columnGeometric_configuration = New System.Data.DataColumn("Geometric configuration", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Geometric_configuration")
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Geometric_configurationColumn")
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnGeometric_configuration")
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_UserColumnName", "Geometric configuration")
            MyBase.Columns.Add(Me.columnGeometric_configuration)
            Me.columnBC = New System.Data.DataColumn("BC", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBC)
            Me._columna__m_ = New System.Data.DataColumn("a (m)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_a__m_")
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_a__m_Column")
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columna__m_")
            Me._columna__m_.ExtendedProperties.Add("Generator_UserColumnName", "a (m)")
            MyBase.Columns.Add(Me._columna__m_)
            Me._columnb__m_ = New System.Data.DataColumn("b (m)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_b__m_")
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_b__m_Column")
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnb__m_")
            Me._columnb__m_.ExtendedProperties.Add("Generator_UserColumnName", "b (m)")
            MyBase.Columns.Add(Me._columnb__m_)
            Me._columna_b = New System.Data.DataColumn("a/b", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columna_b.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_a_b")
            Me._columna_b.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_a_bColumn")
            Me._columna_b.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columna_b")
            Me._columna_b.ExtendedProperties.Add("Generator_UserColumnName", "a/b")
            MyBase.Columns.Add(Me._columna_b)
            Me._columnt__mm_ = New System.Data.DataColumn("t (mm)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnt__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_t__mm_")
            Me._columnt__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_t__mm_Column")
            Me._columnt__mm_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnt__mm_")
            Me._columnt__mm_.ExtendedProperties.Add("Generator_UserColumnName", "t (mm)")
            MyBase.Columns.Add(Me._columnt__mm_)
            Me.columnNa = New System.Data.DataColumn("Na", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNa)
            Me.columnNb = New System.Data.DataColumn("Nb", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNb)
            Me._columnP__Pa_ = New System.Data.DataColumn("P (Pa)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_P__Pa_")
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_P__Pa_Column")
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnP__Pa_")
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_UserColumnName", "P (Pa)")
            MyBase.Columns.Add(Me._columnP__Pa_)
            Me._columnE__GPa_ = New System.Data.DataColumn("E (GPa)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_E__GPa_")
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_E__GPa_Column")
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnE__GPa_")
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_UserColumnName", "E (GPa)")
            MyBase.Columns.Add(Me._columnE__GPa_)
            Me.columnni = New System.Data.DataColumn("ni", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnni)
            Me._columnProgram_result__mm_ = New System.Data.DataColumn("Program result (mm)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Program_result__mm_")
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_Program_result__mm_Column")
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnProgram_result__mm_")
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_UserColumnName", "Program result (mm)")
            MyBase.Columns.Add(Me._columnProgram_result__mm_)
            Me._columnFEA_result__mm_ = New System.Data.DataColumn("FEA result (mm)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_FEA_result__mm_")
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_FEA_result__mm_Column")
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFEA_result__mm_")
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_UserColumnName", "FEA result (mm)")
            MyBase.Columns.Add(Me._columnFEA_result__mm_)
            Me.columnRelative_Error = New System.Data.DataColumn("Relative Error", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Relative_Error")
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Relative_ErrorColumn")
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRelative_Error")
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_UserColumnName", "Relative Error")
            MyBase.Columns.Add(Me.columnRelative_Error)
            Me.columnFEA_result_at_center = New System.Data.DataColumn("FEA result at center", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "FEA_result_at_center")
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "FEA_result_at_centerColumn")
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnFEA_result_at_center")
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_UserColumnName", "FEA result at center")
            MyBase.Columns.Add(Me.columnFEA_result_at_center)
            Me.columnשדה19 = New System.Data.DataColumn("שדה19", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnשדה19)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCount}, true))
            Me.columnCount.AllowDBNull = false
            Me.columnCount.Unique = true
            Me.columnGeometric_configuration.MaxLength = 255
            Me.columnFEA_result_at_center.MaxLength = 255
            Me.columnשדה19.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newgeo03Row() As geo03Row
            Return CType(Me.NewRow,geo03Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New geo03Row(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(geo03Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.geo03RowChangedEvent) Is Nothing) Then
                RaiseEvent geo03RowChanged(Me, New geo03RowChangeEvent(CType(e.Row,geo03Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.geo03RowChangingEvent) Is Nothing) Then
                RaiseEvent geo03RowChanging(Me, New geo03RowChangeEvent(CType(e.Row,geo03Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.geo03RowDeletedEvent) Is Nothing) Then
                RaiseEvent geo03RowDeleted(Me, New geo03RowChangeEvent(CType(e.Row,geo03Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.geo03RowDeletingEvent) Is Nothing) Then
                RaiseEvent geo03RowDeleting(Me, New geo03RowChangeEvent(CType(e.Row,geo03Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removegeo03Row(ByVal row As geo03Row)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DB_DataSet = New DB_DataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "geo03DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class geo04DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCount As System.Data.DataColumn
        
        Private columnGeometric_configuration As System.Data.DataColumn
        
        Private columnBC As System.Data.DataColumn
        
        Private _columna__m_ As System.Data.DataColumn
        
        Private _columnb__m_ As System.Data.DataColumn
        
        Private _columna_b As System.Data.DataColumn
        
        Private _columnt__mm_ As System.Data.DataColumn
        
        Private columnNa As System.Data.DataColumn
        
        Private columnNb As System.Data.DataColumn
        
        Private _columnP__Pa_ As System.Data.DataColumn
        
        Private _columnE__GPa_ As System.Data.DataColumn
        
        Private columnni As System.Data.DataColumn
        
        Private _columnProgram_result__mm_ As System.Data.DataColumn
        
        Private _columnFEA_result__mm_ As System.Data.DataColumn
        
        Private columnRelative_Error As System.Data.DataColumn
        
        Private columnFEA_result_at_center As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "geo04"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountColumn() As System.Data.DataColumn
            Get
                Return Me.columnCount
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Geometric_configurationColumn() As System.Data.DataColumn
            Get
                Return Me.columnGeometric_configuration
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BCColumn() As System.Data.DataColumn
            Get
                Return Me.columnBC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _a__m_Column() As System.Data.DataColumn
            Get
                Return Me._columna__m_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _b__m_Column() As System.Data.DataColumn
            Get
                Return Me._columnb__m_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _a_bColumn() As System.Data.DataColumn
            Get
                Return Me._columna_b
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _t__mm_Column() As System.Data.DataColumn
            Get
                Return Me._columnt__mm_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NaColumn() As System.Data.DataColumn
            Get
                Return Me.columnNa
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NbColumn() As System.Data.DataColumn
            Get
                Return Me.columnNb
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _P__Pa_Column() As System.Data.DataColumn
            Get
                Return Me._columnP__Pa_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _E__GPa_Column() As System.Data.DataColumn
            Get
                Return Me._columnE__GPa_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property niColumn() As System.Data.DataColumn
            Get
                Return Me.columnni
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Program_result__mm_Column() As System.Data.DataColumn
            Get
                Return Me._columnProgram_result__mm_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _FEA_result__mm_Column() As System.Data.DataColumn
            Get
                Return Me._columnFEA_result__mm_
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Relative_ErrorColumn() As System.Data.DataColumn
            Get
                Return Me.columnRelative_Error
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEA_result_at_centerColumn() As System.Data.DataColumn
            Get
                Return Me.columnFEA_result_at_center
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As geo04Row
            Get
                Return CType(Me.Rows(index),geo04Row)
            End Get
        End Property
        
        Public Event geo04RowChanging As geo04RowChangeEventHandler
        
        Public Event geo04RowChanged As geo04RowChangeEventHandler
        
        Public Event geo04RowDeleting As geo04RowChangeEventHandler
        
        Public Event geo04RowDeleted As geo04RowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addgeo04Row(ByVal row As geo04Row)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addgeo04Row( _
                    ByVal Count As Double,  _
                    ByVal Geometric_configuration As String,  _
                    ByVal BC As Double,  _
                    ByVal _a__m_ As Double,  _
                    ByVal _b__m_ As Double,  _
                    ByVal _a_b As Double,  _
                    ByVal _t__mm_ As Double,  _
                    ByVal Na As Double,  _
                    ByVal Nb As Double,  _
                    ByVal _P__Pa_ As Double,  _
                    ByVal _E__GPa_ As Double,  _
                    ByVal ni As Double,  _
                    ByVal _Program_result__mm_ As Double,  _
                    ByVal _FEA_result__mm_ As Double,  _
                    ByVal Relative_Error As Double,  _
                    ByVal FEA_result_at_center As String) As geo04Row
            Dim rowgeo04Row As geo04Row = CType(Me.NewRow,geo04Row)
            rowgeo04Row.ItemArray = New Object() {Count, Geometric_configuration, BC, _a__m_, _b__m_, _a_b, _t__mm_, Na, Nb, _P__Pa_, _E__GPa_, ni, _Program_result__mm_, _FEA_result__mm_, Relative_Error, FEA_result_at_center}
            Me.Rows.Add(rowgeo04Row)
            Return rowgeo04Row
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCount(ByVal Count As Double) As geo04Row
            Return CType(Me.Rows.Find(New Object() {Count}),geo04Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As geo04DataTable = CType(MyBase.Clone,geo04DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New geo04DataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCount = MyBase.Columns("Count")
            Me.columnGeometric_configuration = MyBase.Columns("Geometric configuration")
            Me.columnBC = MyBase.Columns("BC")
            Me._columna__m_ = MyBase.Columns("a (m)")
            Me._columnb__m_ = MyBase.Columns("b (m)")
            Me._columna_b = MyBase.Columns("a/b")
            Me._columnt__mm_ = MyBase.Columns("t (mm)")
            Me.columnNa = MyBase.Columns("Na")
            Me.columnNb = MyBase.Columns("Nb")
            Me._columnP__Pa_ = MyBase.Columns("P (Pa)")
            Me._columnE__GPa_ = MyBase.Columns("E (GPa)")
            Me.columnni = MyBase.Columns("ni")
            Me._columnProgram_result__mm_ = MyBase.Columns("Program result (mm)")
            Me._columnFEA_result__mm_ = MyBase.Columns("FEA result (mm)")
            Me.columnRelative_Error = MyBase.Columns("Relative Error")
            Me.columnFEA_result_at_center = MyBase.Columns("FEA result at center")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCount = New System.Data.DataColumn("Count", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCount)
            Me.columnGeometric_configuration = New System.Data.DataColumn("Geometric configuration", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Geometric_configuration")
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Geometric_configurationColumn")
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnGeometric_configuration")
            Me.columnGeometric_configuration.ExtendedProperties.Add("Generator_UserColumnName", "Geometric configuration")
            MyBase.Columns.Add(Me.columnGeometric_configuration)
            Me.columnBC = New System.Data.DataColumn("BC", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBC)
            Me._columna__m_ = New System.Data.DataColumn("a (m)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_a__m_")
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_a__m_Column")
            Me._columna__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columna__m_")
            Me._columna__m_.ExtendedProperties.Add("Generator_UserColumnName", "a (m)")
            MyBase.Columns.Add(Me._columna__m_)
            Me._columnb__m_ = New System.Data.DataColumn("b (m)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_b__m_")
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_b__m_Column")
            Me._columnb__m_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnb__m_")
            Me._columnb__m_.ExtendedProperties.Add("Generator_UserColumnName", "b (m)")
            MyBase.Columns.Add(Me._columnb__m_)
            Me._columna_b = New System.Data.DataColumn("a/b", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columna_b.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_a_b")
            Me._columna_b.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_a_bColumn")
            Me._columna_b.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columna_b")
            Me._columna_b.ExtendedProperties.Add("Generator_UserColumnName", "a/b")
            MyBase.Columns.Add(Me._columna_b)
            Me._columnt__mm_ = New System.Data.DataColumn("t (mm)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnt__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_t__mm_")
            Me._columnt__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_t__mm_Column")
            Me._columnt__mm_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnt__mm_")
            Me._columnt__mm_.ExtendedProperties.Add("Generator_UserColumnName", "t (mm)")
            MyBase.Columns.Add(Me._columnt__mm_)
            Me.columnNa = New System.Data.DataColumn("Na", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNa)
            Me.columnNb = New System.Data.DataColumn("Nb", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNb)
            Me._columnP__Pa_ = New System.Data.DataColumn("P (Pa)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_P__Pa_")
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_P__Pa_Column")
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnP__Pa_")
            Me._columnP__Pa_.ExtendedProperties.Add("Generator_UserColumnName", "P (Pa)")
            MyBase.Columns.Add(Me._columnP__Pa_)
            Me._columnE__GPa_ = New System.Data.DataColumn("E (GPa)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_E__GPa_")
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_E__GPa_Column")
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnE__GPa_")
            Me._columnE__GPa_.ExtendedProperties.Add("Generator_UserColumnName", "E (GPa)")
            MyBase.Columns.Add(Me._columnE__GPa_)
            Me.columnni = New System.Data.DataColumn("ni", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnni)
            Me._columnProgram_result__mm_ = New System.Data.DataColumn("Program result (mm)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Program_result__mm_")
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_Program_result__mm_Column")
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnProgram_result__mm_")
            Me._columnProgram_result__mm_.ExtendedProperties.Add("Generator_UserColumnName", "Program result (mm)")
            MyBase.Columns.Add(Me._columnProgram_result__mm_)
            Me._columnFEA_result__mm_ = New System.Data.DataColumn("FEA result (mm)", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_FEA_result__mm_")
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_FEA_result__mm_Column")
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnFEA_result__mm_")
            Me._columnFEA_result__mm_.ExtendedProperties.Add("Generator_UserColumnName", "FEA result (mm)")
            MyBase.Columns.Add(Me._columnFEA_result__mm_)
            Me.columnRelative_Error = New System.Data.DataColumn("Relative Error", GetType(Double), Nothing, System.Data.MappingType.Element)
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Relative_Error")
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Relative_ErrorColumn")
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRelative_Error")
            Me.columnRelative_Error.ExtendedProperties.Add("Generator_UserColumnName", "Relative Error")
            MyBase.Columns.Add(Me.columnRelative_Error)
            Me.columnFEA_result_at_center = New System.Data.DataColumn("FEA result at center", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "FEA_result_at_center")
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "FEA_result_at_centerColumn")
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnFEA_result_at_center")
            Me.columnFEA_result_at_center.ExtendedProperties.Add("Generator_UserColumnName", "FEA result at center")
            MyBase.Columns.Add(Me.columnFEA_result_at_center)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCount}, true))
            Me.columnCount.AllowDBNull = false
            Me.columnCount.Unique = true
            Me.columnGeometric_configuration.MaxLength = 255
            Me.columnFEA_result_at_center.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newgeo04Row() As geo04Row
            Return CType(Me.NewRow,geo04Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New geo04Row(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(geo04Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.geo04RowChangedEvent) Is Nothing) Then
                RaiseEvent geo04RowChanged(Me, New geo04RowChangeEvent(CType(e.Row,geo04Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.geo04RowChangingEvent) Is Nothing) Then
                RaiseEvent geo04RowChanging(Me, New geo04RowChangeEvent(CType(e.Row,geo04Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.geo04RowDeletedEvent) Is Nothing) Then
                RaiseEvent geo04RowDeleted(Me, New geo04RowChangeEvent(CType(e.Row,geo04Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.geo04RowDeletingEvent) Is Nothing) Then
                RaiseEvent geo04RowDeleting(Me, New geo04RowChangeEvent(CType(e.Row,geo04Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removegeo04Row(ByVal row As geo04Row)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DB_DataSet = New DB_DataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "geo04DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AllRow
        Inherits System.Data.DataRow
        
        Private tableAll As AllDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAll = CType(Me.Table,AllDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Count() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAll.CountColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Count' in table 'All' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAll.CountColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Geometric_configuration() As String
            Get
                Try 
                    Return CType(Me(Me.tableAll.Geometric_configurationColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Geometric configuration' in table 'All' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAll.Geometric_configurationColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BC() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAll.BCColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'BC' in table 'All' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAll.BCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _a__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAll._a__m_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'a (m)' in table 'All' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAll._a__m_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _b__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAll._b__m_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'b (m)' in table 'All' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAll._b__m_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _a_b() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAll._a_bColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'a/b' in table 'All' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAll._a_bColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _t__mm_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAll._t__mm_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 't (mm)' in table 'All' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAll._t__mm_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Na() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAll.NaColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Na' in table 'All' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAll.NaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nb() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAll.NbColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Nb' in table 'All' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAll.NbColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _P__Pa_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAll._P__Pa_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'P (Pa)' in table 'All' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAll._P__Pa_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _E__GPa_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAll._E__GPa_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'E (GPa)' in table 'All' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAll._E__GPa_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ni() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAll.niColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ni' in table 'All' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAll.niColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Program_result__mm_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAll._Program_result__mm_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Program result (mm)' in table 'All' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAll._Program_result__mm_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _FEA_result__mm_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAll._FEA_result__mm_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'FEA result (mm)' in table 'All' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAll._FEA_result__mm_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Relative_Error() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAll.Relative_ErrorColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Relative Error' in table 'All' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAll.Relative_ErrorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEA_result_at_center() As String
            Get
                Try 
                    Return CType(Me(Me.tableAll.FEA_result_at_centerColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'FEA result at center' in table 'All' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAll.FEA_result_at_centerColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCountNull() As Boolean
            Return Me.IsNull(Me.tableAll.CountColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCountNull()
            Me(Me.tableAll.CountColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGeometric_configurationNull() As Boolean
            Return Me.IsNull(Me.tableAll.Geometric_configurationColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGeometric_configurationNull()
            Me(Me.tableAll.Geometric_configurationColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBCNull() As Boolean
            Return Me.IsNull(Me.tableAll.BCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBCNull()
            Me(Me.tableAll.BCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_a__m_Null() As Boolean
            Return Me.IsNull(Me.tableAll._a__m_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_a__m_Null()
            Me(Me.tableAll._a__m_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_b__m_Null() As Boolean
            Return Me.IsNull(Me.tableAll._b__m_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_b__m_Null()
            Me(Me.tableAll._b__m_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_a_bNull() As Boolean
            Return Me.IsNull(Me.tableAll._a_bColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_a_bNull()
            Me(Me.tableAll._a_bColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_t__mm_Null() As Boolean
            Return Me.IsNull(Me.tableAll._t__mm_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_t__mm_Null()
            Me(Me.tableAll._t__mm_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNaNull() As Boolean
            Return Me.IsNull(Me.tableAll.NaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNaNull()
            Me(Me.tableAll.NaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNbNull() As Boolean
            Return Me.IsNull(Me.tableAll.NbColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNbNull()
            Me(Me.tableAll.NbColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_P__Pa_Null() As Boolean
            Return Me.IsNull(Me.tableAll._P__Pa_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_P__Pa_Null()
            Me(Me.tableAll._P__Pa_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_E__GPa_Null() As Boolean
            Return Me.IsNull(Me.tableAll._E__GPa_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_E__GPa_Null()
            Me(Me.tableAll._E__GPa_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsniNull() As Boolean
            Return Me.IsNull(Me.tableAll.niColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetniNull()
            Me(Me.tableAll.niColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Program_result__mm_Null() As Boolean
            Return Me.IsNull(Me.tableAll._Program_result__mm_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Program_result__mm_Null()
            Me(Me.tableAll._Program_result__mm_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_FEA_result__mm_Null() As Boolean
            Return Me.IsNull(Me.tableAll._FEA_result__mm_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_FEA_result__mm_Null()
            Me(Me.tableAll._FEA_result__mm_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRelative_ErrorNull() As Boolean
            Return Me.IsNull(Me.tableAll.Relative_ErrorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRelative_ErrorNull()
            Me(Me.tableAll.Relative_ErrorColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEA_result_at_centerNull() As Boolean
            Return Me.IsNull(Me.tableAll.FEA_result_at_centerColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEA_result_at_centerNull()
            Me(Me.tableAll.FEA_result_at_centerColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class geo01Row
        Inherits System.Data.DataRow
        
        Private tablegeo01 As geo01DataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablegeo01 = CType(Me.Table,geo01DataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Count() As Double
            Get
                Return CType(Me(Me.tablegeo01.CountColumn),Double)
            End Get
            Set
                Me(Me.tablegeo01.CountColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Geometric_configuration() As String
            Get
                Try 
                    Return CType(Me(Me.tablegeo01.Geometric_configurationColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Geometric configuration' in table 'geo01' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo01.Geometric_configurationColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BC() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo01.BCColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'BC' in table 'geo01' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo01.BCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _a__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo01._a__m_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'a (m)' in table 'geo01' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo01._a__m_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _b__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo01._b__m_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'b (m)' in table 'geo01' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo01._b__m_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _a_b() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo01._a_bColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'a/b' in table 'geo01' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo01._a_bColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _t__mm_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo01._t__mm_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 't (mm)' in table 'geo01' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo01._t__mm_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Na() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo01.NaColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Na' in table 'geo01' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo01.NaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nb() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo01.NbColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Nb' in table 'geo01' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo01.NbColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _P__Pa_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo01._P__Pa_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'P (Pa)' in table 'geo01' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo01._P__Pa_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _E__GPa_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo01._E__GPa_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'E (GPa)' in table 'geo01' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo01._E__GPa_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ni() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo01.niColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ni' in table 'geo01' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo01.niColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Program_result__mm_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo01._Program_result__mm_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Program result (mm)' in table 'geo01' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo01._Program_result__mm_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _FEA_result__mm_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo01._FEA_result__mm_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'FEA result (mm)' in table 'geo01' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo01._FEA_result__mm_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Relative_Error() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo01.Relative_ErrorColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Relative Error' in table 'geo01' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo01.Relative_ErrorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEA_result_at_center() As String
            Get
                Try 
                    Return CType(Me(Me.tablegeo01.FEA_result_at_centerColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'FEA result at center' in table 'geo01' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo01.FEA_result_at_centerColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGeometric_configurationNull() As Boolean
            Return Me.IsNull(Me.tablegeo01.Geometric_configurationColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGeometric_configurationNull()
            Me(Me.tablegeo01.Geometric_configurationColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBCNull() As Boolean
            Return Me.IsNull(Me.tablegeo01.BCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBCNull()
            Me(Me.tablegeo01.BCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_a__m_Null() As Boolean
            Return Me.IsNull(Me.tablegeo01._a__m_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_a__m_Null()
            Me(Me.tablegeo01._a__m_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_b__m_Null() As Boolean
            Return Me.IsNull(Me.tablegeo01._b__m_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_b__m_Null()
            Me(Me.tablegeo01._b__m_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_a_bNull() As Boolean
            Return Me.IsNull(Me.tablegeo01._a_bColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_a_bNull()
            Me(Me.tablegeo01._a_bColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_t__mm_Null() As Boolean
            Return Me.IsNull(Me.tablegeo01._t__mm_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_t__mm_Null()
            Me(Me.tablegeo01._t__mm_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNaNull() As Boolean
            Return Me.IsNull(Me.tablegeo01.NaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNaNull()
            Me(Me.tablegeo01.NaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNbNull() As Boolean
            Return Me.IsNull(Me.tablegeo01.NbColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNbNull()
            Me(Me.tablegeo01.NbColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_P__Pa_Null() As Boolean
            Return Me.IsNull(Me.tablegeo01._P__Pa_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_P__Pa_Null()
            Me(Me.tablegeo01._P__Pa_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_E__GPa_Null() As Boolean
            Return Me.IsNull(Me.tablegeo01._E__GPa_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_E__GPa_Null()
            Me(Me.tablegeo01._E__GPa_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsniNull() As Boolean
            Return Me.IsNull(Me.tablegeo01.niColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetniNull()
            Me(Me.tablegeo01.niColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Program_result__mm_Null() As Boolean
            Return Me.IsNull(Me.tablegeo01._Program_result__mm_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Program_result__mm_Null()
            Me(Me.tablegeo01._Program_result__mm_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_FEA_result__mm_Null() As Boolean
            Return Me.IsNull(Me.tablegeo01._FEA_result__mm_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_FEA_result__mm_Null()
            Me(Me.tablegeo01._FEA_result__mm_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRelative_ErrorNull() As Boolean
            Return Me.IsNull(Me.tablegeo01.Relative_ErrorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRelative_ErrorNull()
            Me(Me.tablegeo01.Relative_ErrorColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEA_result_at_centerNull() As Boolean
            Return Me.IsNull(Me.tablegeo01.FEA_result_at_centerColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEA_result_at_centerNull()
            Me(Me.tablegeo01.FEA_result_at_centerColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class geo02Row
        Inherits System.Data.DataRow
        
        Private tablegeo02 As geo02DataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablegeo02 = CType(Me.Table,geo02DataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Count() As Double
            Get
                Return CType(Me(Me.tablegeo02.CountColumn),Double)
            End Get
            Set
                Me(Me.tablegeo02.CountColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Geometric_configuration() As String
            Get
                Try 
                    Return CType(Me(Me.tablegeo02.Geometric_configurationColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Geometric configuration' in table 'geo02' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo02.Geometric_configurationColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BC() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo02.BCColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'BC' in table 'geo02' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo02.BCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _a__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo02._a__m_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'a (m)' in table 'geo02' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo02._a__m_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _b__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo02._b__m_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'b (m)' in table 'geo02' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo02._b__m_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _a_b() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo02._a_bColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'a/b' in table 'geo02' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo02._a_bColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _t__mm_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo02._t__mm_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 't (mm)' in table 'geo02' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo02._t__mm_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Na() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo02.NaColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Na' in table 'geo02' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo02.NaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nb() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo02.NbColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Nb' in table 'geo02' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo02.NbColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _P__Pa_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo02._P__Pa_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'P (Pa)' in table 'geo02' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo02._P__Pa_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _E__GPa_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo02._E__GPa_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'E (GPa)' in table 'geo02' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo02._E__GPa_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ni() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo02.niColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ni' in table 'geo02' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo02.niColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Program_result__mm_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo02._Program_result__mm_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Program result (mm)' in table 'geo02' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo02._Program_result__mm_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _FEA_result__mm_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo02._FEA_result__mm_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'FEA result (mm)' in table 'geo02' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo02._FEA_result__mm_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Relative_Error() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo02.Relative_ErrorColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Relative Error' in table 'geo02' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo02.Relative_ErrorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEA_result_at_center() As String
            Get
                Try 
                    Return CType(Me(Me.tablegeo02.FEA_result_at_centerColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'FEA result at center' in table 'geo02' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo02.FEA_result_at_centerColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGeometric_configurationNull() As Boolean
            Return Me.IsNull(Me.tablegeo02.Geometric_configurationColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGeometric_configurationNull()
            Me(Me.tablegeo02.Geometric_configurationColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBCNull() As Boolean
            Return Me.IsNull(Me.tablegeo02.BCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBCNull()
            Me(Me.tablegeo02.BCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_a__m_Null() As Boolean
            Return Me.IsNull(Me.tablegeo02._a__m_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_a__m_Null()
            Me(Me.tablegeo02._a__m_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_b__m_Null() As Boolean
            Return Me.IsNull(Me.tablegeo02._b__m_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_b__m_Null()
            Me(Me.tablegeo02._b__m_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_a_bNull() As Boolean
            Return Me.IsNull(Me.tablegeo02._a_bColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_a_bNull()
            Me(Me.tablegeo02._a_bColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_t__mm_Null() As Boolean
            Return Me.IsNull(Me.tablegeo02._t__mm_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_t__mm_Null()
            Me(Me.tablegeo02._t__mm_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNaNull() As Boolean
            Return Me.IsNull(Me.tablegeo02.NaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNaNull()
            Me(Me.tablegeo02.NaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNbNull() As Boolean
            Return Me.IsNull(Me.tablegeo02.NbColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNbNull()
            Me(Me.tablegeo02.NbColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_P__Pa_Null() As Boolean
            Return Me.IsNull(Me.tablegeo02._P__Pa_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_P__Pa_Null()
            Me(Me.tablegeo02._P__Pa_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_E__GPa_Null() As Boolean
            Return Me.IsNull(Me.tablegeo02._E__GPa_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_E__GPa_Null()
            Me(Me.tablegeo02._E__GPa_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsniNull() As Boolean
            Return Me.IsNull(Me.tablegeo02.niColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetniNull()
            Me(Me.tablegeo02.niColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Program_result__mm_Null() As Boolean
            Return Me.IsNull(Me.tablegeo02._Program_result__mm_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Program_result__mm_Null()
            Me(Me.tablegeo02._Program_result__mm_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_FEA_result__mm_Null() As Boolean
            Return Me.IsNull(Me.tablegeo02._FEA_result__mm_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_FEA_result__mm_Null()
            Me(Me.tablegeo02._FEA_result__mm_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRelative_ErrorNull() As Boolean
            Return Me.IsNull(Me.tablegeo02.Relative_ErrorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRelative_ErrorNull()
            Me(Me.tablegeo02.Relative_ErrorColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEA_result_at_centerNull() As Boolean
            Return Me.IsNull(Me.tablegeo02.FEA_result_at_centerColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEA_result_at_centerNull()
            Me(Me.tablegeo02.FEA_result_at_centerColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class geo03Row
        Inherits System.Data.DataRow
        
        Private tablegeo03 As geo03DataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablegeo03 = CType(Me.Table,geo03DataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Count() As Double
            Get
                Return CType(Me(Me.tablegeo03.CountColumn),Double)
            End Get
            Set
                Me(Me.tablegeo03.CountColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Geometric_configuration() As String
            Get
                Try 
                    Return CType(Me(Me.tablegeo03.Geometric_configurationColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Geometric configuration' in table 'geo03' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo03.Geometric_configurationColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BC() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo03.BCColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'BC' in table 'geo03' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo03.BCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _a__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo03._a__m_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'a (m)' in table 'geo03' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo03._a__m_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _b__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo03._b__m_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'b (m)' in table 'geo03' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo03._b__m_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _a_b() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo03._a_bColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'a/b' in table 'geo03' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo03._a_bColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _t__mm_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo03._t__mm_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 't (mm)' in table 'geo03' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo03._t__mm_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Na() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo03.NaColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Na' in table 'geo03' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo03.NaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nb() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo03.NbColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Nb' in table 'geo03' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo03.NbColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _P__Pa_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo03._P__Pa_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'P (Pa)' in table 'geo03' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo03._P__Pa_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _E__GPa_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo03._E__GPa_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'E (GPa)' in table 'geo03' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo03._E__GPa_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ni() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo03.niColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ni' in table 'geo03' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo03.niColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Program_result__mm_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo03._Program_result__mm_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Program result (mm)' in table 'geo03' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo03._Program_result__mm_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _FEA_result__mm_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo03._FEA_result__mm_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'FEA result (mm)' in table 'geo03' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo03._FEA_result__mm_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Relative_Error() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo03.Relative_ErrorColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Relative Error' in table 'geo03' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo03.Relative_ErrorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEA_result_at_center() As String
            Get
                Try 
                    Return CType(Me(Me.tablegeo03.FEA_result_at_centerColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'FEA result at center' in table 'geo03' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo03.FEA_result_at_centerColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property שדה19() As String
            Get
                Try 
                    Return CType(Me(Me.tablegeo03.שדה19Column),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'שדה19' in table 'geo03' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo03.שדה19Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGeometric_configurationNull() As Boolean
            Return Me.IsNull(Me.tablegeo03.Geometric_configurationColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGeometric_configurationNull()
            Me(Me.tablegeo03.Geometric_configurationColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBCNull() As Boolean
            Return Me.IsNull(Me.tablegeo03.BCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBCNull()
            Me(Me.tablegeo03.BCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_a__m_Null() As Boolean
            Return Me.IsNull(Me.tablegeo03._a__m_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_a__m_Null()
            Me(Me.tablegeo03._a__m_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_b__m_Null() As Boolean
            Return Me.IsNull(Me.tablegeo03._b__m_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_b__m_Null()
            Me(Me.tablegeo03._b__m_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_a_bNull() As Boolean
            Return Me.IsNull(Me.tablegeo03._a_bColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_a_bNull()
            Me(Me.tablegeo03._a_bColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_t__mm_Null() As Boolean
            Return Me.IsNull(Me.tablegeo03._t__mm_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_t__mm_Null()
            Me(Me.tablegeo03._t__mm_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNaNull() As Boolean
            Return Me.IsNull(Me.tablegeo03.NaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNaNull()
            Me(Me.tablegeo03.NaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNbNull() As Boolean
            Return Me.IsNull(Me.tablegeo03.NbColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNbNull()
            Me(Me.tablegeo03.NbColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_P__Pa_Null() As Boolean
            Return Me.IsNull(Me.tablegeo03._P__Pa_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_P__Pa_Null()
            Me(Me.tablegeo03._P__Pa_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_E__GPa_Null() As Boolean
            Return Me.IsNull(Me.tablegeo03._E__GPa_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_E__GPa_Null()
            Me(Me.tablegeo03._E__GPa_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsniNull() As Boolean
            Return Me.IsNull(Me.tablegeo03.niColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetniNull()
            Me(Me.tablegeo03.niColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Program_result__mm_Null() As Boolean
            Return Me.IsNull(Me.tablegeo03._Program_result__mm_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Program_result__mm_Null()
            Me(Me.tablegeo03._Program_result__mm_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_FEA_result__mm_Null() As Boolean
            Return Me.IsNull(Me.tablegeo03._FEA_result__mm_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_FEA_result__mm_Null()
            Me(Me.tablegeo03._FEA_result__mm_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRelative_ErrorNull() As Boolean
            Return Me.IsNull(Me.tablegeo03.Relative_ErrorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRelative_ErrorNull()
            Me(Me.tablegeo03.Relative_ErrorColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEA_result_at_centerNull() As Boolean
            Return Me.IsNull(Me.tablegeo03.FEA_result_at_centerColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEA_result_at_centerNull()
            Me(Me.tablegeo03.FEA_result_at_centerColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isשדה19Null() As Boolean
            Return Me.IsNull(Me.tablegeo03.שדה19Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setשדה19Null()
            Me(Me.tablegeo03.שדה19Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class geo04Row
        Inherits System.Data.DataRow
        
        Private tablegeo04 As geo04DataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablegeo04 = CType(Me.Table,geo04DataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Count() As Double
            Get
                Return CType(Me(Me.tablegeo04.CountColumn),Double)
            End Get
            Set
                Me(Me.tablegeo04.CountColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Geometric_configuration() As String
            Get
                Try 
                    Return CType(Me(Me.tablegeo04.Geometric_configurationColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Geometric configuration' in table 'geo04' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo04.Geometric_configurationColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BC() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo04.BCColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'BC' in table 'geo04' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo04.BCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _a__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo04._a__m_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'a (m)' in table 'geo04' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo04._a__m_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _b__m_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo04._b__m_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'b (m)' in table 'geo04' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo04._b__m_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _a_b() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo04._a_bColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'a/b' in table 'geo04' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo04._a_bColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _t__mm_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo04._t__mm_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 't (mm)' in table 'geo04' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo04._t__mm_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Na() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo04.NaColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Na' in table 'geo04' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo04.NaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nb() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo04.NbColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Nb' in table 'geo04' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo04.NbColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _P__Pa_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo04._P__Pa_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'P (Pa)' in table 'geo04' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo04._P__Pa_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _E__GPa_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo04._E__GPa_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'E (GPa)' in table 'geo04' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo04._E__GPa_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ni() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo04.niColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ni' in table 'geo04' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo04.niColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Program_result__mm_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo04._Program_result__mm_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Program result (mm)' in table 'geo04' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo04._Program_result__mm_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _FEA_result__mm_() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo04._FEA_result__mm_Column),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'FEA result (mm)' in table 'geo04' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo04._FEA_result__mm_Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Relative_Error() As Double
            Get
                Try 
                    Return CType(Me(Me.tablegeo04.Relative_ErrorColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Relative Error' in table 'geo04' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo04.Relative_ErrorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEA_result_at_center() As String
            Get
                Try 
                    Return CType(Me(Me.tablegeo04.FEA_result_at_centerColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'FEA result at center' in table 'geo04' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegeo04.FEA_result_at_centerColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGeometric_configurationNull() As Boolean
            Return Me.IsNull(Me.tablegeo04.Geometric_configurationColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGeometric_configurationNull()
            Me(Me.tablegeo04.Geometric_configurationColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBCNull() As Boolean
            Return Me.IsNull(Me.tablegeo04.BCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBCNull()
            Me(Me.tablegeo04.BCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_a__m_Null() As Boolean
            Return Me.IsNull(Me.tablegeo04._a__m_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_a__m_Null()
            Me(Me.tablegeo04._a__m_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_b__m_Null() As Boolean
            Return Me.IsNull(Me.tablegeo04._b__m_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_b__m_Null()
            Me(Me.tablegeo04._b__m_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_a_bNull() As Boolean
            Return Me.IsNull(Me.tablegeo04._a_bColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_a_bNull()
            Me(Me.tablegeo04._a_bColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_t__mm_Null() As Boolean
            Return Me.IsNull(Me.tablegeo04._t__mm_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_t__mm_Null()
            Me(Me.tablegeo04._t__mm_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNaNull() As Boolean
            Return Me.IsNull(Me.tablegeo04.NaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNaNull()
            Me(Me.tablegeo04.NaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNbNull() As Boolean
            Return Me.IsNull(Me.tablegeo04.NbColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNbNull()
            Me(Me.tablegeo04.NbColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_P__Pa_Null() As Boolean
            Return Me.IsNull(Me.tablegeo04._P__Pa_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_P__Pa_Null()
            Me(Me.tablegeo04._P__Pa_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_E__GPa_Null() As Boolean
            Return Me.IsNull(Me.tablegeo04._E__GPa_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_E__GPa_Null()
            Me(Me.tablegeo04._E__GPa_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsniNull() As Boolean
            Return Me.IsNull(Me.tablegeo04.niColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetniNull()
            Me(Me.tablegeo04.niColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Program_result__mm_Null() As Boolean
            Return Me.IsNull(Me.tablegeo04._Program_result__mm_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Program_result__mm_Null()
            Me(Me.tablegeo04._Program_result__mm_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_FEA_result__mm_Null() As Boolean
            Return Me.IsNull(Me.tablegeo04._FEA_result__mm_Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_FEA_result__mm_Null()
            Me(Me.tablegeo04._FEA_result__mm_Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRelative_ErrorNull() As Boolean
            Return Me.IsNull(Me.tablegeo04.Relative_ErrorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRelative_ErrorNull()
            Me(Me.tablegeo04.Relative_ErrorColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEA_result_at_centerNull() As Boolean
            Return Me.IsNull(Me.tablegeo04.FEA_result_at_centerColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEA_result_at_centerNull()
            Me(Me.tablegeo04.FEA_result_at_centerColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AllRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As AllRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AllRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AllRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class geo01RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As geo01Row
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As geo01Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As geo01Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class geo02RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As geo02Row
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As geo02Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As geo02Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class geo03RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As geo03Row
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As geo03Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As geo03Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class geo04RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As geo04Row
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As geo04Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As geo04Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DB_DataSetTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AllTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "All"
            tableMapping.ColumnMappings.Add("Count", "Count")
            tableMapping.ColumnMappings.Add("Geometric configuration", "Geometric configuration")
            tableMapping.ColumnMappings.Add("BC", "BC")
            tableMapping.ColumnMappings.Add("a (m)", "a (m)")
            tableMapping.ColumnMappings.Add("b (m)", "b (m)")
            tableMapping.ColumnMappings.Add("a/b", "a/b")
            tableMapping.ColumnMappings.Add("t (mm)", "t (mm)")
            tableMapping.ColumnMappings.Add("Na", "Na")
            tableMapping.ColumnMappings.Add("Nb", "Nb")
            tableMapping.ColumnMappings.Add("P (Pa)", "P (Pa)")
            tableMapping.ColumnMappings.Add("E (GPa)", "E (GPa)")
            tableMapping.ColumnMappings.Add("ni", "ni")
            tableMapping.ColumnMappings.Add("Program result (mm)", "Program result (mm)")
            tableMapping.ColumnMappings.Add("FEA result (mm)", "FEA result (mm)")
            tableMapping.ColumnMappings.Add("Relative Error", "Relative Error")
            tableMapping.ColumnMappings.Add("FEA result at center", "FEA result at center")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `All geometric configurations` (`Count`, `Geometric configuration`, `"& _ 
                "BC`, `a (m)`, `b (m)`, `a/b`, `t (mm)`, `Na`, `Nb`, `P (Pa)`, `E (GPa)`, `ni`, `"& _ 
                "Program result (mm)`, `FEA result (mm)`, `Relative Error`, `FEA result at center"& _ 
                "`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Count", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Count", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Geometric_configuration", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("BC", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("a_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("b_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("a/b", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("t_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Na", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Nb", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("P_(Pa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("E_(GPa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("ni", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Program_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("FEA_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Relative_Error", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("FEA_result_at_center", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SPE.My.MySettings.Default.DB_string
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [Count], [Geometric configuration], BC, [a (m)], [b (m)], [a/b], [t (mm)],"& _ 
                " Na, Nb, [P (Pa)], [E (GPa)], ni, [Program result (mm)], [FEA result (mm)], [Rel"& _ 
                "ative Error], [FEA result at center] FROM [All geometric configurations]"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DB_DataSet.AllDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DB_DataSet.AllDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DB_DataSet.AllDataTable = New DB_DataSet.AllDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DB_DataSet.AllDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DB_DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "All")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Count As System.Nullable(Of Double),  _
                    ByVal Geometric_configuration As String,  _
                    ByVal BC As System.Nullable(Of Double),  _
                    ByVal _a__m_ As System.Nullable(Of Double),  _
                    ByVal _b__m_ As System.Nullable(Of Double),  _
                    ByVal _a_b As System.Nullable(Of Double),  _
                    ByVal _t__mm_ As System.Nullable(Of Double),  _
                    ByVal Na As System.Nullable(Of Double),  _
                    ByVal Nb As System.Nullable(Of Double),  _
                    ByVal _P__Pa_ As System.Nullable(Of Double),  _
                    ByVal _E__GPa_ As System.Nullable(Of Double),  _
                    ByVal ni As System.Nullable(Of Double),  _
                    ByVal _Program_result__mm_ As System.Nullable(Of Double),  _
                    ByVal _FEA_result__mm_ As System.Nullable(Of Double),  _
                    ByVal Relative_Error As System.Nullable(Of Double),  _
                    ByVal FEA_result_at_center As String) As Integer
            If (Count.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Count.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Geometric_configuration Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Geometric_configuration,String)
            End If
            If (BC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(BC.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (_a__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(_a__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (_b__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(_b__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (_a_b.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(_a_b.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (_t__mm_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(_t__mm_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Na.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Na.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (Nb.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Nb.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (_P__Pa_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(_P__Pa_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (_E__GPa_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(_E__GPa_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (ni.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ni.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (_Program_result__mm_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(_Program_result__mm_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (_FEA_result__mm_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(_FEA_result__mm_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (Relative_Error.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Relative_Error.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (FEA_result_at_center Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(FEA_result_at_center,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class geo01TableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "geo01"
            tableMapping.ColumnMappings.Add("Count", "Count")
            tableMapping.ColumnMappings.Add("Geometric configuration", "Geometric configuration")
            tableMapping.ColumnMappings.Add("BC", "BC")
            tableMapping.ColumnMappings.Add("a (m)", "a (m)")
            tableMapping.ColumnMappings.Add("b (m)", "b (m)")
            tableMapping.ColumnMappings.Add("a/b", "a/b")
            tableMapping.ColumnMappings.Add("t (mm)", "t (mm)")
            tableMapping.ColumnMappings.Add("Na", "Na")
            tableMapping.ColumnMappings.Add("Nb", "Nb")
            tableMapping.ColumnMappings.Add("P (Pa)", "P (Pa)")
            tableMapping.ColumnMappings.Add("E (GPa)", "E (GPa)")
            tableMapping.ColumnMappings.Add("ni", "ni")
            tableMapping.ColumnMappings.Add("Program result (mm)", "Program result (mm)")
            tableMapping.ColumnMappings.Add("FEA result (mm)", "FEA result (mm)")
            tableMapping.ColumnMappings.Add("Relative Error", "Relative Error")
            tableMapping.ColumnMappings.Add("FEA result at center", "FEA result at center")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `geo01` WHERE ((`Count` = ?) AND ((? = 1 AND `Geometric configuration"& _ 
                "` IS NULL) OR (`Geometric configuration` = ?)) AND ((? = 1 AND `BC` IS NULL) OR "& _ 
                "(`BC` = ?)) AND ((? = 1 AND `a (m)` IS NULL) OR (`a (m)` = ?)) AND ((? = 1 AND `"& _ 
                "b (m)` IS NULL) OR (`b (m)` = ?)) AND ((? = 1 AND `a/b` IS NULL) OR (`a/b` = ?))"& _ 
                " AND ((? = 1 AND `t (mm)` IS NULL) OR (`t (mm)` = ?)) AND ((? = 1 AND `Na` IS NU"& _ 
                "LL) OR (`Na` = ?)) AND ((? = 1 AND `Nb` IS NULL) OR (`Nb` = ?)) AND ((? = 1 AND "& _ 
                "`P (Pa)` IS NULL) OR (`P (Pa)` = ?)) AND ((? = 1 AND `E (GPa)` IS NULL) OR (`E ("& _ 
                "GPa)` = ?)) AND ((? = 1 AND `ni` IS NULL) OR (`ni` = ?)) AND ((? = 1 AND `Progra"& _ 
                "m result (mm)` IS NULL) OR (`Program result (mm)` = ?)) AND ((? = 1 AND `FEA res"& _ 
                "ult (mm)` IS NULL) OR (`FEA result (mm)` = ?)) AND ((? = 1 AND `Relative Error` "& _ 
                "IS NULL) OR (`Relative Error` = ?)) AND ((? = 1 AND `FEA result at center` IS NU"& _ 
                "LL) OR (`FEA result at center` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Count", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Count", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Geometric_configuration", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Geometric_configuration", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_BC", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_BC", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_a_(m)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_a_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_b_(m)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_b_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_a/b", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_a/b", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_t_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_t_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Na", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Na", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Nb", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Nb", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_P_(Pa)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_P_(Pa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_E_(GPa)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_E_(GPa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_ni", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_ni", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Program_result_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Program_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_FEA_result_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_FEA_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Relative_Error", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Relative_Error", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_FEA_result_at_center", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_FEA_result_at_center", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `geo01` (`Count`, `Geometric configuration`, `BC`, `a (m)`, `b (m)`, "& _ 
                "`a/b`, `t (mm)`, `Na`, `Nb`, `P (Pa)`, `E (GPa)`, `ni`, `Program result (mm)`, `"& _ 
                "FEA result (mm)`, `Relative Error`, `FEA result at center`) VALUES (?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Count", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Count", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Geometric_configuration", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("BC", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("a_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("b_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("a/b", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("t_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Na", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Nb", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("P_(Pa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("E_(GPa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("ni", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Program_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("FEA_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Relative_Error", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("FEA_result_at_center", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `geo01` SET `Count` = ?, `Geometric configuration` = ?, `BC` = ?, `a (m)` "& _ 
                "= ?, `b (m)` = ?, `a/b` = ?, `t (mm)` = ?, `Na` = ?, `Nb` = ?, `P (Pa)` = ?, `E "& _ 
                "(GPa)` = ?, `ni` = ?, `Program result (mm)` = ?, `FEA result (mm)` = ?, `Relativ"& _ 
                "e Error` = ?, `FEA result at center` = ? WHERE ((`Count` = ?) AND ((? = 1 AND `G"& _ 
                "eometric configuration` IS NULL) OR (`Geometric configuration` = ?)) AND ((? = 1"& _ 
                " AND `BC` IS NULL) OR (`BC` = ?)) AND ((? = 1 AND `a (m)` IS NULL) OR (`a (m)` ="& _ 
                " ?)) AND ((? = 1 AND `b (m)` IS NULL) OR (`b (m)` = ?)) AND ((? = 1 AND `a/b` IS"& _ 
                " NULL) OR (`a/b` = ?)) AND ((? = 1 AND `t (mm)` IS NULL) OR (`t (mm)` = ?)) AND "& _ 
                "((? = 1 AND `Na` IS NULL) OR (`Na` = ?)) AND ((? = 1 AND `Nb` IS NULL) OR (`Nb` "& _ 
                "= ?)) AND ((? = 1 AND `P (Pa)` IS NULL) OR (`P (Pa)` = ?)) AND ((? = 1 AND `E (G"& _ 
                "Pa)` IS NULL) OR (`E (GPa)` = ?)) AND ((? = 1 AND `ni` IS NULL) OR (`ni` = ?)) A"& _ 
                "ND ((? = 1 AND `Program result (mm)` IS NULL) OR (`Program result (mm)` = ?)) AN"& _ 
                "D ((? = 1 AND `FEA result (mm)` IS NULL) OR (`FEA result (mm)` = ?)) AND ((? = 1"& _ 
                " AND `Relative Error` IS NULL) OR (`Relative Error` = ?)) AND ((? = 1 AND `FEA r"& _ 
                "esult at center` IS NULL) OR (`FEA result at center` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Count", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Count", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Geometric_configuration", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("BC", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("a_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("b_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("a/b", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("t_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Na", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Nb", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("P_(Pa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("E_(GPa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("ni", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Program_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("FEA_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Relative_Error", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("FEA_result_at_center", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Count", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Count", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Geometric_configuration", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Geometric_configuration", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_BC", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_BC", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_a_(m)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_a_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_b_(m)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_b_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_a/b", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_a/b", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_t_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_t_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Na", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Na", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Nb", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Nb", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_P_(Pa)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_P_(Pa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_E_(GPa)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_E_(GPa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_ni", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_ni", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Program_result_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Program_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_FEA_result_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_FEA_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Relative_Error", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Relative_Error", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_FEA_result_at_center", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_FEA_result_at_center", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SPE.My.MySettings.Default.DB_string
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [Count], [Geometric configuration], BC, [a (m)], [b (m)], [a/b], [t (mm)],"& _ 
                " Na, Nb, [P (Pa)], [E (GPa)], ni, [Program result (mm)], [FEA result (mm)], [Rel"& _ 
                "ative Error], [FEA result at center] FROM geo01"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DB_DataSet.geo01DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DB_DataSet.geo01DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DB_DataSet.geo01DataTable = New DB_DataSet.geo01DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DB_DataSet.geo01DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DB_DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "geo01")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_Count As System.Nullable(Of Double),  _
                    ByVal Original_Geometric_configuration As String,  _
                    ByVal Original_BC As System.Nullable(Of Double),  _
                    ByVal _Original_a__m_ As System.Nullable(Of Double),  _
                    ByVal _Original_b__m_ As System.Nullable(Of Double),  _
                    ByVal _Original_a_b As System.Nullable(Of Double),  _
                    ByVal _Original_t__mm_ As System.Nullable(Of Double),  _
                    ByVal Original_Na As System.Nullable(Of Double),  _
                    ByVal Original_Nb As System.Nullable(Of Double),  _
                    ByVal _Original_P__Pa_ As System.Nullable(Of Double),  _
                    ByVal _Original_E__GPa_ As System.Nullable(Of Double),  _
                    ByVal Original_ni As System.Nullable(Of Double),  _
                    ByVal _Original_Program_result__mm_ As System.Nullable(Of Double),  _
                    ByVal _Original_FEA_result__mm_ As System.Nullable(Of Double),  _
                    ByVal Original_Relative_Error As System.Nullable(Of Double),  _
                    ByVal Original_FEA_result_at_center As String) As Integer
            If (Original_Count.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Count.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Original_Geometric_configuration Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Geometric_configuration,String)
            End If
            If (Original_BC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_BC.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (_Original_a__m_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(_Original_a__m_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (_Original_b__m_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(_Original_b__m_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (_Original_a_b.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(_Original_a_b.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (_Original_t__mm_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(_Original_t__mm_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (Original_Na.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Na.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (Original_Nb.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Nb.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (_Original_P__Pa_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(_Original_P__Pa_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
            End If
            If (_Original_E__GPa_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(_Original_E__GPa_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (Original_ni.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_ni.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = System.DBNull.Value
            End If
            If (_Original_Program_result__mm_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(_Original_Program_result__mm_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = System.DBNull.Value
            End If
            If (_Original_FEA_result__mm_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(_Original_FEA_result__mm_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = System.DBNull.Value
            End If
            If (Original_Relative_Error.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_Relative_Error.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = System.DBNull.Value
            End If
            If (Original_FEA_result_at_center Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_FEA_result_at_center,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Count As System.Nullable(Of Double),  _
                    ByVal Geometric_configuration As String,  _
                    ByVal BC As System.Nullable(Of Double),  _
                    ByVal _a__m_ As System.Nullable(Of Double),  _
                    ByVal _b__m_ As System.Nullable(Of Double),  _
                    ByVal _a_b As System.Nullable(Of Double),  _
                    ByVal _t__mm_ As System.Nullable(Of Double),  _
                    ByVal Na As System.Nullable(Of Double),  _
                    ByVal Nb As System.Nullable(Of Double),  _
                    ByVal _P__Pa_ As System.Nullable(Of Double),  _
                    ByVal _E__GPa_ As System.Nullable(Of Double),  _
                    ByVal ni As System.Nullable(Of Double),  _
                    ByVal _Program_result__mm_ As System.Nullable(Of Double),  _
                    ByVal _FEA_result__mm_ As System.Nullable(Of Double),  _
                    ByVal Relative_Error As System.Nullable(Of Double),  _
                    ByVal FEA_result_at_center As String) As Integer
            If (Count.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Count.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Geometric_configuration Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Geometric_configuration,String)
            End If
            If (BC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(BC.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (_a__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(_a__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (_b__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(_b__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (_a_b.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(_a_b.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (_t__mm_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(_t__mm_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Na.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Na.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (Nb.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Nb.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (_P__Pa_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(_P__Pa_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (_E__GPa_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(_E__GPa_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (ni.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ni.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (_Program_result__mm_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(_Program_result__mm_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (_FEA_result__mm_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(_FEA_result__mm_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (Relative_Error.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Relative_Error.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (FEA_result_at_center Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(FEA_result_at_center,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Count As System.Nullable(Of Double),  _
                    ByVal Geometric_configuration As String,  _
                    ByVal BC As System.Nullable(Of Double),  _
                    ByVal _a__m_ As System.Nullable(Of Double),  _
                    ByVal _b__m_ As System.Nullable(Of Double),  _
                    ByVal _a_b As System.Nullable(Of Double),  _
                    ByVal _t__mm_ As System.Nullable(Of Double),  _
                    ByVal Na As System.Nullable(Of Double),  _
                    ByVal Nb As System.Nullable(Of Double),  _
                    ByVal _P__Pa_ As System.Nullable(Of Double),  _
                    ByVal _E__GPa_ As System.Nullable(Of Double),  _
                    ByVal ni As System.Nullable(Of Double),  _
                    ByVal _Program_result__mm_ As System.Nullable(Of Double),  _
                    ByVal _FEA_result__mm_ As System.Nullable(Of Double),  _
                    ByVal Relative_Error As System.Nullable(Of Double),  _
                    ByVal FEA_result_at_center As String,  _
                    ByVal Original_Count As System.Nullable(Of Double),  _
                    ByVal Original_Geometric_configuration As String,  _
                    ByVal Original_BC As System.Nullable(Of Double),  _
                    ByVal _Original_a__m_ As System.Nullable(Of Double),  _
                    ByVal _Original_b__m_ As System.Nullable(Of Double),  _
                    ByVal _Original_a_b As System.Nullable(Of Double),  _
                    ByVal _Original_t__mm_ As System.Nullable(Of Double),  _
                    ByVal Original_Na As System.Nullable(Of Double),  _
                    ByVal Original_Nb As System.Nullable(Of Double),  _
                    ByVal _Original_P__Pa_ As System.Nullable(Of Double),  _
                    ByVal _Original_E__GPa_ As System.Nullable(Of Double),  _
                    ByVal Original_ni As System.Nullable(Of Double),  _
                    ByVal _Original_Program_result__mm_ As System.Nullable(Of Double),  _
                    ByVal _Original_FEA_result__mm_ As System.Nullable(Of Double),  _
                    ByVal Original_Relative_Error As System.Nullable(Of Double),  _
                    ByVal Original_FEA_result_at_center As String) As Integer
            If (Count.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Count.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Geometric_configuration Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Geometric_configuration,String)
            End If
            If (BC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(BC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (_a__m_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(_a__m_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (_b__m_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(_b__m_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (_a_b.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(_a_b.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (_t__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(_t__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Na.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Na.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (Nb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Nb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (_P__Pa_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(_P__Pa_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (_E__GPa_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(_E__GPa_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (ni.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ni.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (_Program_result__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(_Program_result__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (_FEA_result__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(_FEA_result__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (Relative_Error.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Relative_Error.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (FEA_result_at_center Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(FEA_result_at_center,String)
            End If
            If (Original_Count.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Count.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (Original_Geometric_configuration Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Geometric_configuration,String)
            End If
            If (Original_BC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_BC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (_Original_a__m_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(_Original_a__m_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            End If
            If (_Original_b__m_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(_Original_b__m_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = System.DBNull.Value
            End If
            If (_Original_a_b.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(_Original_a_b.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = System.DBNull.Value
            End If
            If (_Original_t__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(_Original_t__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = System.DBNull.Value
            End If
            If (Original_Na.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_Na.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = System.DBNull.Value
            End If
            If (Original_Nb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_Nb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = System.DBNull.Value
            End If
            If (_Original_P__Pa_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(_Original_P__Pa_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = System.DBNull.Value
            End If
            If (_Original_E__GPa_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(_Original_E__GPa_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = System.DBNull.Value
            End If
            If (Original_ni.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_ni.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = System.DBNull.Value
            End If
            If (_Original_Program_result__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(_Original_Program_result__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = System.DBNull.Value
            End If
            If (_Original_FEA_result__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(_Original_FEA_result__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = System.DBNull.Value
            End If
            If (Original_Relative_Error.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_Relative_Error.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = System.DBNull.Value
            End If
            If (Original_FEA_result_at_center Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_FEA_result_at_center,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class geo02TableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "geo02"
            tableMapping.ColumnMappings.Add("Count", "Count")
            tableMapping.ColumnMappings.Add("Geometric configuration", "Geometric configuration")
            tableMapping.ColumnMappings.Add("BC", "BC")
            tableMapping.ColumnMappings.Add("a (m)", "a (m)")
            tableMapping.ColumnMappings.Add("b (m)", "b (m)")
            tableMapping.ColumnMappings.Add("a/b", "a/b")
            tableMapping.ColumnMappings.Add("t (mm)", "t (mm)")
            tableMapping.ColumnMappings.Add("Na", "Na")
            tableMapping.ColumnMappings.Add("Nb", "Nb")
            tableMapping.ColumnMappings.Add("P (Pa)", "P (Pa)")
            tableMapping.ColumnMappings.Add("E (GPa)", "E (GPa)")
            tableMapping.ColumnMappings.Add("ni", "ni")
            tableMapping.ColumnMappings.Add("Program result (mm)", "Program result (mm)")
            tableMapping.ColumnMappings.Add("FEA result (mm)", "FEA result (mm)")
            tableMapping.ColumnMappings.Add("Relative Error", "Relative Error")
            tableMapping.ColumnMappings.Add("FEA result at center", "FEA result at center")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `geo02` WHERE ((`Count` = ?) AND ((? = 1 AND `Geometric configuration"& _ 
                "` IS NULL) OR (`Geometric configuration` = ?)) AND ((? = 1 AND `BC` IS NULL) OR "& _ 
                "(`BC` = ?)) AND ((? = 1 AND `a (m)` IS NULL) OR (`a (m)` = ?)) AND ((? = 1 AND `"& _ 
                "b (m)` IS NULL) OR (`b (m)` = ?)) AND ((? = 1 AND `a/b` IS NULL) OR (`a/b` = ?))"& _ 
                " AND ((? = 1 AND `t (mm)` IS NULL) OR (`t (mm)` = ?)) AND ((? = 1 AND `Na` IS NU"& _ 
                "LL) OR (`Na` = ?)) AND ((? = 1 AND `Nb` IS NULL) OR (`Nb` = ?)) AND ((? = 1 AND "& _ 
                "`P (Pa)` IS NULL) OR (`P (Pa)` = ?)) AND ((? = 1 AND `E (GPa)` IS NULL) OR (`E ("& _ 
                "GPa)` = ?)) AND ((? = 1 AND `ni` IS NULL) OR (`ni` = ?)) AND ((? = 1 AND `Progra"& _ 
                "m result (mm)` IS NULL) OR (`Program result (mm)` = ?)) AND ((? = 1 AND `FEA res"& _ 
                "ult (mm)` IS NULL) OR (`FEA result (mm)` = ?)) AND ((? = 1 AND `Relative Error` "& _ 
                "IS NULL) OR (`Relative Error` = ?)) AND ((? = 1 AND `FEA result at center` IS NU"& _ 
                "LL) OR (`FEA result at center` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Count", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Count", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Geometric_configuration", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Geometric_configuration", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_BC", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_BC", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_a_(m)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_a_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_b_(m)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_b_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_a/b", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_a/b", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_t_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_t_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Na", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Na", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Nb", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Nb", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_P_(Pa)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_P_(Pa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_E_(GPa)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_E_(GPa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_ni", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_ni", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Program_result_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Program_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_FEA_result_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_FEA_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Relative_Error", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Relative_Error", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_FEA_result_at_center", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_FEA_result_at_center", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `geo02` (`Count`, `Geometric configuration`, `BC`, `a (m)`, `b (m)`, "& _ 
                "`a/b`, `t (mm)`, `Na`, `Nb`, `P (Pa)`, `E (GPa)`, `ni`, `Program result (mm)`, `"& _ 
                "FEA result (mm)`, `Relative Error`, `FEA result at center`) VALUES (?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Count", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Count", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Geometric_configuration", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("BC", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("a_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("b_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("a/b", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("t_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Na", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Nb", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("P_(Pa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("E_(GPa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("ni", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Program_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("FEA_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Relative_Error", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("FEA_result_at_center", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `geo02` SET `Count` = ?, `Geometric configuration` = ?, `BC` = ?, `a (m)` "& _ 
                "= ?, `b (m)` = ?, `a/b` = ?, `t (mm)` = ?, `Na` = ?, `Nb` = ?, `P (Pa)` = ?, `E "& _ 
                "(GPa)` = ?, `ni` = ?, `Program result (mm)` = ?, `FEA result (mm)` = ?, `Relativ"& _ 
                "e Error` = ?, `FEA result at center` = ? WHERE ((`Count` = ?) AND ((? = 1 AND `G"& _ 
                "eometric configuration` IS NULL) OR (`Geometric configuration` = ?)) AND ((? = 1"& _ 
                " AND `BC` IS NULL) OR (`BC` = ?)) AND ((? = 1 AND `a (m)` IS NULL) OR (`a (m)` ="& _ 
                " ?)) AND ((? = 1 AND `b (m)` IS NULL) OR (`b (m)` = ?)) AND ((? = 1 AND `a/b` IS"& _ 
                " NULL) OR (`a/b` = ?)) AND ((? = 1 AND `t (mm)` IS NULL) OR (`t (mm)` = ?)) AND "& _ 
                "((? = 1 AND `Na` IS NULL) OR (`Na` = ?)) AND ((? = 1 AND `Nb` IS NULL) OR (`Nb` "& _ 
                "= ?)) AND ((? = 1 AND `P (Pa)` IS NULL) OR (`P (Pa)` = ?)) AND ((? = 1 AND `E (G"& _ 
                "Pa)` IS NULL) OR (`E (GPa)` = ?)) AND ((? = 1 AND `ni` IS NULL) OR (`ni` = ?)) A"& _ 
                "ND ((? = 1 AND `Program result (mm)` IS NULL) OR (`Program result (mm)` = ?)) AN"& _ 
                "D ((? = 1 AND `FEA result (mm)` IS NULL) OR (`FEA result (mm)` = ?)) AND ((? = 1"& _ 
                " AND `Relative Error` IS NULL) OR (`Relative Error` = ?)) AND ((? = 1 AND `FEA r"& _ 
                "esult at center` IS NULL) OR (`FEA result at center` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Count", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Count", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Geometric_configuration", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("BC", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("a_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("b_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("a/b", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("t_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Na", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Nb", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("P_(Pa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("E_(GPa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("ni", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Program_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("FEA_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Relative_Error", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("FEA_result_at_center", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Count", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Count", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Geometric_configuration", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Geometric_configuration", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_BC", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_BC", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_a_(m)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_a_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_b_(m)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_b_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_a/b", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_a/b", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_t_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_t_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Na", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Na", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Nb", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Nb", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_P_(Pa)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_P_(Pa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_E_(GPa)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_E_(GPa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_ni", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_ni", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Program_result_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Program_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_FEA_result_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_FEA_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Relative_Error", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Relative_Error", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_FEA_result_at_center", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_FEA_result_at_center", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SPE.My.MySettings.Default.DB_string
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [Count], [Geometric configuration], BC, [a (m)], [b (m)], [a/b], [t (mm)],"& _ 
                " Na, Nb, [P (Pa)], [E (GPa)], ni, [Program result (mm)], [FEA result (mm)], [Rel"& _ 
                "ative Error], [FEA result at center] FROM geo02"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DB_DataSet.geo02DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DB_DataSet.geo02DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DB_DataSet.geo02DataTable = New DB_DataSet.geo02DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DB_DataSet.geo02DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DB_DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "geo02")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_Count As System.Nullable(Of Double),  _
                    ByVal Original_Geometric_configuration As String,  _
                    ByVal Original_BC As System.Nullable(Of Double),  _
                    ByVal _Original_a__m_ As System.Nullable(Of Double),  _
                    ByVal _Original_b__m_ As System.Nullable(Of Double),  _
                    ByVal _Original_a_b As System.Nullable(Of Double),  _
                    ByVal _Original_t__mm_ As System.Nullable(Of Double),  _
                    ByVal Original_Na As System.Nullable(Of Double),  _
                    ByVal Original_Nb As System.Nullable(Of Double),  _
                    ByVal _Original_P__Pa_ As System.Nullable(Of Double),  _
                    ByVal _Original_E__GPa_ As System.Nullable(Of Double),  _
                    ByVal Original_ni As System.Nullable(Of Double),  _
                    ByVal _Original_Program_result__mm_ As System.Nullable(Of Double),  _
                    ByVal _Original_FEA_result__mm_ As System.Nullable(Of Double),  _
                    ByVal Original_Relative_Error As System.Nullable(Of Double),  _
                    ByVal Original_FEA_result_at_center As String) As Integer
            If (Original_Count.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Count.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Original_Geometric_configuration Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Geometric_configuration,String)
            End If
            If (Original_BC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_BC.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (_Original_a__m_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(_Original_a__m_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (_Original_b__m_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(_Original_b__m_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (_Original_a_b.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(_Original_a_b.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (_Original_t__mm_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(_Original_t__mm_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (Original_Na.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Na.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (Original_Nb.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Nb.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (_Original_P__Pa_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(_Original_P__Pa_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
            End If
            If (_Original_E__GPa_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(_Original_E__GPa_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (Original_ni.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_ni.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = System.DBNull.Value
            End If
            If (_Original_Program_result__mm_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(_Original_Program_result__mm_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = System.DBNull.Value
            End If
            If (_Original_FEA_result__mm_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(_Original_FEA_result__mm_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = System.DBNull.Value
            End If
            If (Original_Relative_Error.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_Relative_Error.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = System.DBNull.Value
            End If
            If (Original_FEA_result_at_center Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_FEA_result_at_center,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Count As System.Nullable(Of Double),  _
                    ByVal Geometric_configuration As String,  _
                    ByVal BC As System.Nullable(Of Double),  _
                    ByVal _a__m_ As System.Nullable(Of Double),  _
                    ByVal _b__m_ As System.Nullable(Of Double),  _
                    ByVal _a_b As System.Nullable(Of Double),  _
                    ByVal _t__mm_ As System.Nullable(Of Double),  _
                    ByVal Na As System.Nullable(Of Double),  _
                    ByVal Nb As System.Nullable(Of Double),  _
                    ByVal _P__Pa_ As System.Nullable(Of Double),  _
                    ByVal _E__GPa_ As System.Nullable(Of Double),  _
                    ByVal ni As System.Nullable(Of Double),  _
                    ByVal _Program_result__mm_ As System.Nullable(Of Double),  _
                    ByVal _FEA_result__mm_ As System.Nullable(Of Double),  _
                    ByVal Relative_Error As System.Nullable(Of Double),  _
                    ByVal FEA_result_at_center As String) As Integer
            If (Count.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Count.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Geometric_configuration Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Geometric_configuration,String)
            End If
            If (BC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(BC.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (_a__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(_a__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (_b__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(_b__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (_a_b.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(_a_b.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (_t__mm_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(_t__mm_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Na.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Na.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (Nb.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Nb.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (_P__Pa_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(_P__Pa_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (_E__GPa_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(_E__GPa_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (ni.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ni.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (_Program_result__mm_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(_Program_result__mm_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (_FEA_result__mm_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(_FEA_result__mm_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (Relative_Error.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Relative_Error.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (FEA_result_at_center Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(FEA_result_at_center,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Count As System.Nullable(Of Double),  _
                    ByVal Geometric_configuration As String,  _
                    ByVal BC As System.Nullable(Of Double),  _
                    ByVal _a__m_ As System.Nullable(Of Double),  _
                    ByVal _b__m_ As System.Nullable(Of Double),  _
                    ByVal _a_b As System.Nullable(Of Double),  _
                    ByVal _t__mm_ As System.Nullable(Of Double),  _
                    ByVal Na As System.Nullable(Of Double),  _
                    ByVal Nb As System.Nullable(Of Double),  _
                    ByVal _P__Pa_ As System.Nullable(Of Double),  _
                    ByVal _E__GPa_ As System.Nullable(Of Double),  _
                    ByVal ni As System.Nullable(Of Double),  _
                    ByVal _Program_result__mm_ As System.Nullable(Of Double),  _
                    ByVal _FEA_result__mm_ As System.Nullable(Of Double),  _
                    ByVal Relative_Error As System.Nullable(Of Double),  _
                    ByVal FEA_result_at_center As String,  _
                    ByVal Original_Count As System.Nullable(Of Double),  _
                    ByVal Original_Geometric_configuration As String,  _
                    ByVal Original_BC As System.Nullable(Of Double),  _
                    ByVal _Original_a__m_ As System.Nullable(Of Double),  _
                    ByVal _Original_b__m_ As System.Nullable(Of Double),  _
                    ByVal _Original_a_b As System.Nullable(Of Double),  _
                    ByVal _Original_t__mm_ As System.Nullable(Of Double),  _
                    ByVal Original_Na As System.Nullable(Of Double),  _
                    ByVal Original_Nb As System.Nullable(Of Double),  _
                    ByVal _Original_P__Pa_ As System.Nullable(Of Double),  _
                    ByVal _Original_E__GPa_ As System.Nullable(Of Double),  _
                    ByVal Original_ni As System.Nullable(Of Double),  _
                    ByVal _Original_Program_result__mm_ As System.Nullable(Of Double),  _
                    ByVal _Original_FEA_result__mm_ As System.Nullable(Of Double),  _
                    ByVal Original_Relative_Error As System.Nullable(Of Double),  _
                    ByVal Original_FEA_result_at_center As String) As Integer
            If (Count.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Count.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Geometric_configuration Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Geometric_configuration,String)
            End If
            If (BC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(BC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (_a__m_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(_a__m_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (_b__m_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(_b__m_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (_a_b.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(_a_b.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (_t__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(_t__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Na.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Na.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (Nb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Nb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (_P__Pa_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(_P__Pa_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (_E__GPa_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(_E__GPa_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (ni.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ni.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (_Program_result__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(_Program_result__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (_FEA_result__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(_FEA_result__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (Relative_Error.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Relative_Error.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (FEA_result_at_center Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(FEA_result_at_center,String)
            End If
            If (Original_Count.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Count.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (Original_Geometric_configuration Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Geometric_configuration,String)
            End If
            If (Original_BC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_BC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (_Original_a__m_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(_Original_a__m_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            End If
            If (_Original_b__m_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(_Original_b__m_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = System.DBNull.Value
            End If
            If (_Original_a_b.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(_Original_a_b.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = System.DBNull.Value
            End If
            If (_Original_t__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(_Original_t__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = System.DBNull.Value
            End If
            If (Original_Na.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_Na.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = System.DBNull.Value
            End If
            If (Original_Nb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_Nb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = System.DBNull.Value
            End If
            If (_Original_P__Pa_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(_Original_P__Pa_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = System.DBNull.Value
            End If
            If (_Original_E__GPa_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(_Original_E__GPa_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = System.DBNull.Value
            End If
            If (Original_ni.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_ni.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = System.DBNull.Value
            End If
            If (_Original_Program_result__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(_Original_Program_result__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = System.DBNull.Value
            End If
            If (_Original_FEA_result__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(_Original_FEA_result__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = System.DBNull.Value
            End If
            If (Original_Relative_Error.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_Relative_Error.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = System.DBNull.Value
            End If
            If (Original_FEA_result_at_center Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_FEA_result_at_center,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class geo03TableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "geo03"
            tableMapping.ColumnMappings.Add("Count", "Count")
            tableMapping.ColumnMappings.Add("Geometric configuration", "Geometric configuration")
            tableMapping.ColumnMappings.Add("BC", "BC")
            tableMapping.ColumnMappings.Add("a (m)", "a (m)")
            tableMapping.ColumnMappings.Add("b (m)", "b (m)")
            tableMapping.ColumnMappings.Add("a/b", "a/b")
            tableMapping.ColumnMappings.Add("t (mm)", "t (mm)")
            tableMapping.ColumnMappings.Add("Na", "Na")
            tableMapping.ColumnMappings.Add("Nb", "Nb")
            tableMapping.ColumnMappings.Add("P (Pa)", "P (Pa)")
            tableMapping.ColumnMappings.Add("E (GPa)", "E (GPa)")
            tableMapping.ColumnMappings.Add("ni", "ni")
            tableMapping.ColumnMappings.Add("Program result (mm)", "Program result (mm)")
            tableMapping.ColumnMappings.Add("FEA result (mm)", "FEA result (mm)")
            tableMapping.ColumnMappings.Add("Relative Error", "Relative Error")
            tableMapping.ColumnMappings.Add("FEA result at center", "FEA result at center")
            tableMapping.ColumnMappings.Add("שדה19", "שדה19")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `geo03` WHERE ((`Count` = ?) AND ((? = 1 AND `Geometric configuration"& _ 
                "` IS NULL) OR (`Geometric configuration` = ?)) AND ((? = 1 AND `BC` IS NULL) OR "& _ 
                "(`BC` = ?)) AND ((? = 1 AND `a (m)` IS NULL) OR (`a (m)` = ?)) AND ((? = 1 AND `"& _ 
                "b (m)` IS NULL) OR (`b (m)` = ?)) AND ((? = 1 AND `a/b` IS NULL) OR (`a/b` = ?))"& _ 
                " AND ((? = 1 AND `t (mm)` IS NULL) OR (`t (mm)` = ?)) AND ((? = 1 AND `Na` IS NU"& _ 
                "LL) OR (`Na` = ?)) AND ((? = 1 AND `Nb` IS NULL) OR (`Nb` = ?)) AND ((? = 1 AND "& _ 
                "`P (Pa)` IS NULL) OR (`P (Pa)` = ?)) AND ((? = 1 AND `E (GPa)` IS NULL) OR (`E ("& _ 
                "GPa)` = ?)) AND ((? = 1 AND `ni` IS NULL) OR (`ni` = ?)) AND ((? = 1 AND `Progra"& _ 
                "m result (mm)` IS NULL) OR (`Program result (mm)` = ?)) AND ((? = 1 AND `FEA res"& _ 
                "ult (mm)` IS NULL) OR (`FEA result (mm)` = ?)) AND ((? = 1 AND `Relative Error` "& _ 
                "IS NULL) OR (`Relative Error` = ?)) AND ((? = 1 AND `FEA result at center` IS NU"& _ 
                "LL) OR (`FEA result at center` = ?)) AND ((? = 1 AND `שדה19` IS NULL) OR (`שדה19"& _ 
                "` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Count", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Count", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Geometric_configuration", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Geometric_configuration", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_BC", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_BC", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_a_(m)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_a_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_b_(m)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_b_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_a/b", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_a/b", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_t_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_t_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Na", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Na", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Nb", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Nb", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_P_(Pa)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_P_(Pa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_E_(GPa)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_E_(GPa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_ni", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_ni", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Program_result_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Program_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_FEA_result_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_FEA_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Relative_Error", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Relative_Error", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_FEA_result_at_center", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_FEA_result_at_center", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_שדה19", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "שדה19", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_שדה19", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "שדה19", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `geo03` (`Count`, `Geometric configuration`, `BC`, `a (m)`, `b (m)`, "& _ 
                "`a/b`, `t (mm)`, `Na`, `Nb`, `P (Pa)`, `E (GPa)`, `ni`, `Program result (mm)`, `"& _ 
                "FEA result (mm)`, `Relative Error`, `FEA result at center`, `שדה19`) VALUES (?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Count", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Count", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Geometric_configuration", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("BC", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("a_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("b_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("a/b", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("t_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Na", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Nb", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("P_(Pa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("E_(GPa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("ni", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Program_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("FEA_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Relative_Error", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("FEA_result_at_center", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("שדה19", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "שדה19", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `geo03` SET `Count` = ?, `Geometric configuration` = ?, `BC` = ?, `a (m)` "& _ 
                "= ?, `b (m)` = ?, `a/b` = ?, `t (mm)` = ?, `Na` = ?, `Nb` = ?, `P (Pa)` = ?, `E "& _ 
                "(GPa)` = ?, `ni` = ?, `Program result (mm)` = ?, `FEA result (mm)` = ?, `Relativ"& _ 
                "e Error` = ?, `FEA result at center` = ?, `שדה19` = ? WHERE ((`Count` = ?) AND ("& _ 
                "(? = 1 AND `Geometric configuration` IS NULL) OR (`Geometric configuration` = ?)"& _ 
                ") AND ((? = 1 AND `BC` IS NULL) OR (`BC` = ?)) AND ((? = 1 AND `a (m)` IS NULL) "& _ 
                "OR (`a (m)` = ?)) AND ((? = 1 AND `b (m)` IS NULL) OR (`b (m)` = ?)) AND ((? = 1"& _ 
                " AND `a/b` IS NULL) OR (`a/b` = ?)) AND ((? = 1 AND `t (mm)` IS NULL) OR (`t (mm"& _ 
                ")` = ?)) AND ((? = 1 AND `Na` IS NULL) OR (`Na` = ?)) AND ((? = 1 AND `Nb` IS NU"& _ 
                "LL) OR (`Nb` = ?)) AND ((? = 1 AND `P (Pa)` IS NULL) OR (`P (Pa)` = ?)) AND ((? "& _ 
                "= 1 AND `E (GPa)` IS NULL) OR (`E (GPa)` = ?)) AND ((? = 1 AND `ni` IS NULL) OR "& _ 
                "(`ni` = ?)) AND ((? = 1 AND `Program result (mm)` IS NULL) OR (`Program result ("& _ 
                "mm)` = ?)) AND ((? = 1 AND `FEA result (mm)` IS NULL) OR (`FEA result (mm)` = ?)"& _ 
                ") AND ((? = 1 AND `Relative Error` IS NULL) OR (`Relative Error` = ?)) AND ((? ="& _ 
                " 1 AND `FEA result at center` IS NULL) OR (`FEA result at center` = ?)) AND ((? "& _ 
                "= 1 AND `שדה19` IS NULL) OR (`שדה19` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Count", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Count", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Geometric_configuration", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("BC", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("a_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("b_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("a/b", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("t_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Na", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Nb", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("P_(Pa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("E_(GPa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("ni", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Program_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("FEA_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Relative_Error", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("FEA_result_at_center", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("שדה19", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "שדה19", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Count", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Count", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Geometric_configuration", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Geometric_configuration", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_BC", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_BC", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_a_(m)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_a_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_b_(m)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_b_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_a/b", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_a/b", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_t_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_t_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Na", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Na", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Nb", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Nb", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_P_(Pa)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_P_(Pa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_E_(GPa)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_E_(GPa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_ni", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_ni", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Program_result_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Program_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_FEA_result_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_FEA_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Relative_Error", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Relative_Error", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_FEA_result_at_center", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_FEA_result_at_center", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_שדה19", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "שדה19", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_שדה19", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "שדה19", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SPE.My.MySettings.Default.DB_string
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [Count], [Geometric configuration], BC, [a (m)], [b (m)], [a/b], [t (mm)],"& _ 
                " Na, Nb, [P (Pa)], [E (GPa)], ni, [Program result (mm)], [FEA result (mm)], [Rel"& _ 
                "ative Error], [FEA result at center], שדה19 FROM geo03"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DB_DataSet.geo03DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DB_DataSet.geo03DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DB_DataSet.geo03DataTable = New DB_DataSet.geo03DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DB_DataSet.geo03DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DB_DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "geo03")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_Count As System.Nullable(Of Double),  _
                    ByVal Original_Geometric_configuration As String,  _
                    ByVal Original_BC As System.Nullable(Of Double),  _
                    ByVal _Original_a__m_ As System.Nullable(Of Double),  _
                    ByVal _Original_b__m_ As System.Nullable(Of Double),  _
                    ByVal _Original_a_b As System.Nullable(Of Double),  _
                    ByVal _Original_t__mm_ As System.Nullable(Of Double),  _
                    ByVal Original_Na As System.Nullable(Of Double),  _
                    ByVal Original_Nb As System.Nullable(Of Double),  _
                    ByVal _Original_P__Pa_ As System.Nullable(Of Double),  _
                    ByVal _Original_E__GPa_ As System.Nullable(Of Double),  _
                    ByVal Original_ni As System.Nullable(Of Double),  _
                    ByVal _Original_Program_result__mm_ As System.Nullable(Of Double),  _
                    ByVal _Original_FEA_result__mm_ As System.Nullable(Of Double),  _
                    ByVal Original_Relative_Error As System.Nullable(Of Double),  _
                    ByVal Original_FEA_result_at_center As String,  _
                    ByVal Original_שדה19 As String) As Integer
            If (Original_Count.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Count.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Original_Geometric_configuration Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Geometric_configuration,String)
            End If
            If (Original_BC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_BC.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (_Original_a__m_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(_Original_a__m_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (_Original_b__m_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(_Original_b__m_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (_Original_a_b.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(_Original_a_b.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (_Original_t__mm_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(_Original_t__mm_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (Original_Na.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Na.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (Original_Nb.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Nb.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (_Original_P__Pa_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(_Original_P__Pa_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
            End If
            If (_Original_E__GPa_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(_Original_E__GPa_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (Original_ni.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_ni.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = System.DBNull.Value
            End If
            If (_Original_Program_result__mm_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(_Original_Program_result__mm_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = System.DBNull.Value
            End If
            If (_Original_FEA_result__mm_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(_Original_FEA_result__mm_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = System.DBNull.Value
            End If
            If (Original_Relative_Error.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_Relative_Error.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = System.DBNull.Value
            End If
            If (Original_FEA_result_at_center Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_FEA_result_at_center,String)
            End If
            If (Original_שדה19 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_שדה19,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Count As System.Nullable(Of Double),  _
                    ByVal Geometric_configuration As String,  _
                    ByVal BC As System.Nullable(Of Double),  _
                    ByVal _a__m_ As System.Nullable(Of Double),  _
                    ByVal _b__m_ As System.Nullable(Of Double),  _
                    ByVal _a_b As System.Nullable(Of Double),  _
                    ByVal _t__mm_ As System.Nullable(Of Double),  _
                    ByVal Na As System.Nullable(Of Double),  _
                    ByVal Nb As System.Nullable(Of Double),  _
                    ByVal _P__Pa_ As System.Nullable(Of Double),  _
                    ByVal _E__GPa_ As System.Nullable(Of Double),  _
                    ByVal ni As System.Nullable(Of Double),  _
                    ByVal _Program_result__mm_ As System.Nullable(Of Double),  _
                    ByVal _FEA_result__mm_ As System.Nullable(Of Double),  _
                    ByVal Relative_Error As System.Nullable(Of Double),  _
                    ByVal FEA_result_at_center As String,  _
                    ByVal שדה19 As String) As Integer
            If (Count.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Count.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Geometric_configuration Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Geometric_configuration,String)
            End If
            If (BC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(BC.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (_a__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(_a__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (_b__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(_b__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (_a_b.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(_a_b.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (_t__mm_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(_t__mm_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Na.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Na.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (Nb.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Nb.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (_P__Pa_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(_P__Pa_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (_E__GPa_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(_E__GPa_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (ni.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ni.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (_Program_result__mm_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(_Program_result__mm_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (_FEA_result__mm_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(_FEA_result__mm_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (Relative_Error.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Relative_Error.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (FEA_result_at_center Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(FEA_result_at_center,String)
            End If
            If (שדה19 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(שדה19,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Count As System.Nullable(Of Double),  _
                    ByVal Geometric_configuration As String,  _
                    ByVal BC As System.Nullable(Of Double),  _
                    ByVal _a__m_ As System.Nullable(Of Double),  _
                    ByVal _b__m_ As System.Nullable(Of Double),  _
                    ByVal _a_b As System.Nullable(Of Double),  _
                    ByVal _t__mm_ As System.Nullable(Of Double),  _
                    ByVal Na As System.Nullable(Of Double),  _
                    ByVal Nb As System.Nullable(Of Double),  _
                    ByVal _P__Pa_ As System.Nullable(Of Double),  _
                    ByVal _E__GPa_ As System.Nullable(Of Double),  _
                    ByVal ni As System.Nullable(Of Double),  _
                    ByVal _Program_result__mm_ As System.Nullable(Of Double),  _
                    ByVal _FEA_result__mm_ As System.Nullable(Of Double),  _
                    ByVal Relative_Error As System.Nullable(Of Double),  _
                    ByVal FEA_result_at_center As String,  _
                    ByVal שדה19 As String,  _
                    ByVal Original_Count As System.Nullable(Of Double),  _
                    ByVal Original_Geometric_configuration As String,  _
                    ByVal Original_BC As System.Nullable(Of Double),  _
                    ByVal _Original_a__m_ As System.Nullable(Of Double),  _
                    ByVal _Original_b__m_ As System.Nullable(Of Double),  _
                    ByVal _Original_a_b As System.Nullable(Of Double),  _
                    ByVal _Original_t__mm_ As System.Nullable(Of Double),  _
                    ByVal Original_Na As System.Nullable(Of Double),  _
                    ByVal Original_Nb As System.Nullable(Of Double),  _
                    ByVal _Original_P__Pa_ As System.Nullable(Of Double),  _
                    ByVal _Original_E__GPa_ As System.Nullable(Of Double),  _
                    ByVal Original_ni As System.Nullable(Of Double),  _
                    ByVal _Original_Program_result__mm_ As System.Nullable(Of Double),  _
                    ByVal _Original_FEA_result__mm_ As System.Nullable(Of Double),  _
                    ByVal Original_Relative_Error As System.Nullable(Of Double),  _
                    ByVal Original_FEA_result_at_center As String,  _
                    ByVal Original_שדה19 As String) As Integer
            If (Count.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Count.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Geometric_configuration Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Geometric_configuration,String)
            End If
            If (BC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(BC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (_a__m_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(_a__m_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (_b__m_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(_b__m_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (_a_b.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(_a_b.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (_t__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(_t__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Na.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Na.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (Nb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Nb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (_P__Pa_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(_P__Pa_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (_E__GPa_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(_E__GPa_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (ni.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ni.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (_Program_result__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(_Program_result__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (_FEA_result__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(_FEA_result__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (Relative_Error.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Relative_Error.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (FEA_result_at_center Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(FEA_result_at_center,String)
            End If
            If (שדה19 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(שדה19,String)
            End If
            If (Original_Count.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Count.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            End If
            If (Original_Geometric_configuration Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Geometric_configuration,String)
            End If
            If (Original_BC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_BC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
            End If
            If (_Original_a__m_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(_Original_a__m_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = System.DBNull.Value
            End If
            If (_Original_b__m_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(_Original_b__m_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = System.DBNull.Value
            End If
            If (_Original_a_b.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(_Original_a_b.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = System.DBNull.Value
            End If
            If (_Original_t__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(_Original_t__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = System.DBNull.Value
            End If
            If (Original_Na.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_Na.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = System.DBNull.Value
            End If
            If (Original_Nb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_Nb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = System.DBNull.Value
            End If
            If (_Original_P__Pa_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(_Original_P__Pa_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = System.DBNull.Value
            End If
            If (_Original_E__GPa_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(_Original_E__GPa_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = System.DBNull.Value
            End If
            If (Original_ni.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_ni.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = System.DBNull.Value
            End If
            If (_Original_Program_result__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(_Original_Program_result__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = System.DBNull.Value
            End If
            If (_Original_FEA_result__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(_Original_FEA_result__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = System.DBNull.Value
            End If
            If (Original_Relative_Error.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_Relative_Error.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = System.DBNull.Value
            End If
            If (Original_FEA_result_at_center Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_FEA_result_at_center,String)
            End If
            If (Original_שדה19 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_שדה19,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class geo04TableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "geo04"
            tableMapping.ColumnMappings.Add("Count", "Count")
            tableMapping.ColumnMappings.Add("Geometric configuration", "Geometric configuration")
            tableMapping.ColumnMappings.Add("BC", "BC")
            tableMapping.ColumnMappings.Add("a (m)", "a (m)")
            tableMapping.ColumnMappings.Add("b (m)", "b (m)")
            tableMapping.ColumnMappings.Add("a/b", "a/b")
            tableMapping.ColumnMappings.Add("t (mm)", "t (mm)")
            tableMapping.ColumnMappings.Add("Na", "Na")
            tableMapping.ColumnMappings.Add("Nb", "Nb")
            tableMapping.ColumnMappings.Add("P (Pa)", "P (Pa)")
            tableMapping.ColumnMappings.Add("E (GPa)", "E (GPa)")
            tableMapping.ColumnMappings.Add("ni", "ni")
            tableMapping.ColumnMappings.Add("Program result (mm)", "Program result (mm)")
            tableMapping.ColumnMappings.Add("FEA result (mm)", "FEA result (mm)")
            tableMapping.ColumnMappings.Add("Relative Error", "Relative Error")
            tableMapping.ColumnMappings.Add("FEA result at center", "FEA result at center")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `geo04` WHERE ((`Count` = ?) AND ((? = 1 AND `Geometric configuration"& _ 
                "` IS NULL) OR (`Geometric configuration` = ?)) AND ((? = 1 AND `BC` IS NULL) OR "& _ 
                "(`BC` = ?)) AND ((? = 1 AND `a (m)` IS NULL) OR (`a (m)` = ?)) AND ((? = 1 AND `"& _ 
                "b (m)` IS NULL) OR (`b (m)` = ?)) AND ((? = 1 AND `a/b` IS NULL) OR (`a/b` = ?))"& _ 
                " AND ((? = 1 AND `t (mm)` IS NULL) OR (`t (mm)` = ?)) AND ((? = 1 AND `Na` IS NU"& _ 
                "LL) OR (`Na` = ?)) AND ((? = 1 AND `Nb` IS NULL) OR (`Nb` = ?)) AND ((? = 1 AND "& _ 
                "`P (Pa)` IS NULL) OR (`P (Pa)` = ?)) AND ((? = 1 AND `E (GPa)` IS NULL) OR (`E ("& _ 
                "GPa)` = ?)) AND ((? = 1 AND `ni` IS NULL) OR (`ni` = ?)) AND ((? = 1 AND `Progra"& _ 
                "m result (mm)` IS NULL) OR (`Program result (mm)` = ?)) AND ((? = 1 AND `FEA res"& _ 
                "ult (mm)` IS NULL) OR (`FEA result (mm)` = ?)) AND ((? = 1 AND `Relative Error` "& _ 
                "IS NULL) OR (`Relative Error` = ?)) AND ((? = 1 AND `FEA result at center` IS NU"& _ 
                "LL) OR (`FEA result at center` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Count", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Count", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Geometric_configuration", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Geometric_configuration", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_BC", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_BC", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_a_(m)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_a_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_b_(m)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_b_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_a/b", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_a/b", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_t_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_t_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Na", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Na", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Nb", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Nb", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_P_(Pa)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_P_(Pa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_E_(GPa)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_E_(GPa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_ni", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_ni", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Program_result_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Program_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_FEA_result_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_FEA_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Relative_Error", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Relative_Error", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_FEA_result_at_center", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_FEA_result_at_center", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `geo04` (`Count`, `Geometric configuration`, `BC`, `a (m)`, `b (m)`, "& _ 
                "`a/b`, `t (mm)`, `Na`, `Nb`, `P (Pa)`, `E (GPa)`, `ni`, `Program result (mm)`, `"& _ 
                "FEA result (mm)`, `Relative Error`, `FEA result at center`) VALUES (?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Count", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Count", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Geometric_configuration", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("BC", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("a_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("b_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("a/b", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("t_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Na", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Nb", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("P_(Pa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("E_(GPa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("ni", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Program_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("FEA_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Relative_Error", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("FEA_result_at_center", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `geo04` SET `Count` = ?, `Geometric configuration` = ?, `BC` = ?, `a (m)` "& _ 
                "= ?, `b (m)` = ?, `a/b` = ?, `t (mm)` = ?, `Na` = ?, `Nb` = ?, `P (Pa)` = ?, `E "& _ 
                "(GPa)` = ?, `ni` = ?, `Program result (mm)` = ?, `FEA result (mm)` = ?, `Relativ"& _ 
                "e Error` = ?, `FEA result at center` = ? WHERE ((`Count` = ?) AND ((? = 1 AND `G"& _ 
                "eometric configuration` IS NULL) OR (`Geometric configuration` = ?)) AND ((? = 1"& _ 
                " AND `BC` IS NULL) OR (`BC` = ?)) AND ((? = 1 AND `a (m)` IS NULL) OR (`a (m)` ="& _ 
                " ?)) AND ((? = 1 AND `b (m)` IS NULL) OR (`b (m)` = ?)) AND ((? = 1 AND `a/b` IS"& _ 
                " NULL) OR (`a/b` = ?)) AND ((? = 1 AND `t (mm)` IS NULL) OR (`t (mm)` = ?)) AND "& _ 
                "((? = 1 AND `Na` IS NULL) OR (`Na` = ?)) AND ((? = 1 AND `Nb` IS NULL) OR (`Nb` "& _ 
                "= ?)) AND ((? = 1 AND `P (Pa)` IS NULL) OR (`P (Pa)` = ?)) AND ((? = 1 AND `E (G"& _ 
                "Pa)` IS NULL) OR (`E (GPa)` = ?)) AND ((? = 1 AND `ni` IS NULL) OR (`ni` = ?)) A"& _ 
                "ND ((? = 1 AND `Program result (mm)` IS NULL) OR (`Program result (mm)` = ?)) AN"& _ 
                "D ((? = 1 AND `FEA result (mm)` IS NULL) OR (`FEA result (mm)` = ?)) AND ((? = 1"& _ 
                " AND `Relative Error` IS NULL) OR (`Relative Error` = ?)) AND ((? = 1 AND `FEA r"& _ 
                "esult at center` IS NULL) OR (`FEA result at center` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Count", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Count", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Geometric_configuration", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("BC", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("a_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("b_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("a/b", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("t_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Na", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Nb", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("P_(Pa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("E_(GPa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("ni", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Program_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("FEA_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Relative_Error", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("FEA_result_at_center", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Count", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Count", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Geometric_configuration", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Geometric_configuration", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geometric configuration", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_BC", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_BC", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BC", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_a_(m)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_a_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a (m)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_b_(m)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_b_(m)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "b (m)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_a/b", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_a/b", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "a/b", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_t_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_t_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "t (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Na", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Na", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Na", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Nb", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Nb", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nb", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_P_(Pa)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_P_(Pa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P (Pa)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_E_(GPa)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_E_(GPa)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "E (GPa)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_ni", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_ni", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ni", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Program_result_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Program_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Program result (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_FEA_result_(mm)", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_FEA_result_(mm)", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result (mm)", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Relative_Error", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Relative_Error", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Relative Error", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_FEA_result_at_center", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_FEA_result_at_center", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FEA result at center", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.SPE.My.MySettings.Default.DB_string
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [Count], [Geometric configuration], BC, [a (m)], [b (m)], [a/b], [t (mm)],"& _ 
                " Na, Nb, [P (Pa)], [E (GPa)], ni, [Program result (mm)], [FEA result (mm)], [Rel"& _ 
                "ative Error], [FEA result at center] FROM geo04"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DB_DataSet.geo04DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DB_DataSet.geo04DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DB_DataSet.geo04DataTable = New DB_DataSet.geo04DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DB_DataSet.geo04DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DB_DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "geo04")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_Count As System.Nullable(Of Double),  _
                    ByVal Original_Geometric_configuration As String,  _
                    ByVal Original_BC As System.Nullable(Of Double),  _
                    ByVal _Original_a__m_ As System.Nullable(Of Double),  _
                    ByVal _Original_b__m_ As System.Nullable(Of Double),  _
                    ByVal _Original_a_b As System.Nullable(Of Double),  _
                    ByVal _Original_t__mm_ As System.Nullable(Of Double),  _
                    ByVal Original_Na As System.Nullable(Of Double),  _
                    ByVal Original_Nb As System.Nullable(Of Double),  _
                    ByVal _Original_P__Pa_ As System.Nullable(Of Double),  _
                    ByVal _Original_E__GPa_ As System.Nullable(Of Double),  _
                    ByVal Original_ni As System.Nullable(Of Double),  _
                    ByVal _Original_Program_result__mm_ As System.Nullable(Of Double),  _
                    ByVal _Original_FEA_result__mm_ As System.Nullable(Of Double),  _
                    ByVal Original_Relative_Error As System.Nullable(Of Double),  _
                    ByVal Original_FEA_result_at_center As String) As Integer
            If (Original_Count.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Count.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Original_Geometric_configuration Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Geometric_configuration,String)
            End If
            If (Original_BC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_BC.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (_Original_a__m_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(_Original_a__m_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (_Original_b__m_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(_Original_b__m_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (_Original_a_b.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(_Original_a_b.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (_Original_t__mm_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(_Original_t__mm_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (Original_Na.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Na.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (Original_Nb.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Nb.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (_Original_P__Pa_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(_Original_P__Pa_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
            End If
            If (_Original_E__GPa_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(_Original_E__GPa_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (Original_ni.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_ni.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = System.DBNull.Value
            End If
            If (_Original_Program_result__mm_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(_Original_Program_result__mm_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = System.DBNull.Value
            End If
            If (_Original_FEA_result__mm_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(_Original_FEA_result__mm_.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = System.DBNull.Value
            End If
            If (Original_Relative_Error.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_Relative_Error.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = System.DBNull.Value
            End If
            If (Original_FEA_result_at_center Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_FEA_result_at_center,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Count As System.Nullable(Of Double),  _
                    ByVal Geometric_configuration As String,  _
                    ByVal BC As System.Nullable(Of Double),  _
                    ByVal _a__m_ As System.Nullable(Of Double),  _
                    ByVal _b__m_ As System.Nullable(Of Double),  _
                    ByVal _a_b As System.Nullable(Of Double),  _
                    ByVal _t__mm_ As System.Nullable(Of Double),  _
                    ByVal Na As System.Nullable(Of Double),  _
                    ByVal Nb As System.Nullable(Of Double),  _
                    ByVal _P__Pa_ As System.Nullable(Of Double),  _
                    ByVal _E__GPa_ As System.Nullable(Of Double),  _
                    ByVal ni As System.Nullable(Of Double),  _
                    ByVal _Program_result__mm_ As System.Nullable(Of Double),  _
                    ByVal _FEA_result__mm_ As System.Nullable(Of Double),  _
                    ByVal Relative_Error As System.Nullable(Of Double),  _
                    ByVal FEA_result_at_center As String) As Integer
            If (Count.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Count.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Geometric_configuration Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Geometric_configuration,String)
            End If
            If (BC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(BC.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (_a__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(_a__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (_b__m_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(_b__m_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (_a_b.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(_a_b.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (_t__mm_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(_t__mm_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Na.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Na.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (Nb.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Nb.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (_P__Pa_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(_P__Pa_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (_E__GPa_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(_E__GPa_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (ni.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ni.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (_Program_result__mm_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(_Program_result__mm_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (_FEA_result__mm_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(_FEA_result__mm_.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (Relative_Error.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Relative_Error.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (FEA_result_at_center Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(FEA_result_at_center,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Count As System.Nullable(Of Double),  _
                    ByVal Geometric_configuration As String,  _
                    ByVal BC As System.Nullable(Of Double),  _
                    ByVal _a__m_ As System.Nullable(Of Double),  _
                    ByVal _b__m_ As System.Nullable(Of Double),  _
                    ByVal _a_b As System.Nullable(Of Double),  _
                    ByVal _t__mm_ As System.Nullable(Of Double),  _
                    ByVal Na As System.Nullable(Of Double),  _
                    ByVal Nb As System.Nullable(Of Double),  _
                    ByVal _P__Pa_ As System.Nullable(Of Double),  _
                    ByVal _E__GPa_ As System.Nullable(Of Double),  _
                    ByVal ni As System.Nullable(Of Double),  _
                    ByVal _Program_result__mm_ As System.Nullable(Of Double),  _
                    ByVal _FEA_result__mm_ As System.Nullable(Of Double),  _
                    ByVal Relative_Error As System.Nullable(Of Double),  _
                    ByVal FEA_result_at_center As String,  _
                    ByVal Original_Count As System.Nullable(Of Double),  _
                    ByVal Original_Geometric_configuration As String,  _
                    ByVal Original_BC As System.Nullable(Of Double),  _
                    ByVal _Original_a__m_ As System.Nullable(Of Double),  _
                    ByVal _Original_b__m_ As System.Nullable(Of Double),  _
                    ByVal _Original_a_b As System.Nullable(Of Double),  _
                    ByVal _Original_t__mm_ As System.Nullable(Of Double),  _
                    ByVal Original_Na As System.Nullable(Of Double),  _
                    ByVal Original_Nb As System.Nullable(Of Double),  _
                    ByVal _Original_P__Pa_ As System.Nullable(Of Double),  _
                    ByVal _Original_E__GPa_ As System.Nullable(Of Double),  _
                    ByVal Original_ni As System.Nullable(Of Double),  _
                    ByVal _Original_Program_result__mm_ As System.Nullable(Of Double),  _
                    ByVal _Original_FEA_result__mm_ As System.Nullable(Of Double),  _
                    ByVal Original_Relative_Error As System.Nullable(Of Double),  _
                    ByVal Original_FEA_result_at_center As String) As Integer
            If (Count.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Count.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Geometric_configuration Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Geometric_configuration,String)
            End If
            If (BC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(BC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (_a__m_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(_a__m_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (_b__m_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(_b__m_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (_a_b.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(_a_b.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (_t__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(_t__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Na.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Na.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (Nb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Nb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (_P__Pa_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(_P__Pa_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (_E__GPa_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(_E__GPa_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (ni.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ni.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (_Program_result__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(_Program_result__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (_FEA_result__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(_FEA_result__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (Relative_Error.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Relative_Error.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (FEA_result_at_center Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(FEA_result_at_center,String)
            End If
            If (Original_Count.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Count.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (Original_Geometric_configuration Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Geometric_configuration,String)
            End If
            If (Original_BC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_BC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (_Original_a__m_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(_Original_a__m_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            End If
            If (_Original_b__m_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(_Original_b__m_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = System.DBNull.Value
            End If
            If (_Original_a_b.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(_Original_a_b.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = System.DBNull.Value
            End If
            If (_Original_t__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(_Original_t__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = System.DBNull.Value
            End If
            If (Original_Na.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_Na.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = System.DBNull.Value
            End If
            If (Original_Nb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_Nb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = System.DBNull.Value
            End If
            If (_Original_P__Pa_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(_Original_P__Pa_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = System.DBNull.Value
            End If
            If (_Original_E__GPa_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(_Original_E__GPa_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = System.DBNull.Value
            End If
            If (Original_ni.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_ni.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = System.DBNull.Value
            End If
            If (_Original_Program_result__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(_Original_Program_result__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = System.DBNull.Value
            End If
            If (_Original_FEA_result__mm_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(_Original_FEA_result__mm_.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = System.DBNull.Value
            End If
            If (Original_Relative_Error.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_Relative_Error.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = System.DBNull.Value
            End If
            If (Original_FEA_result_at_center Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_FEA_result_at_center,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
